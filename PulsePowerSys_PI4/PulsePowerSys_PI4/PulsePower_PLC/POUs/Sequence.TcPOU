<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Sequence" Id="{663eae43-1137-476a-a586-15717a445f9e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Sequence
VAR
	ePulseState : E_PulseState;
	eCommand	: E_Command;
	eStatus		: E_Status;
	
	ChargeRlyDelayON_Timer : TON;
	ChargeRlyDelayON_PT		: TIME := T#250MS; //used for delay close and delay open for safe mode
	AbortPSnRlyDelay_Timer	: TON;
	AbortPSnRlyDelay_PT		: TIME := T#25MS; //defualt is 25ms
	AbortPSnRlyDelayDONE	: BOOL;
	ChargeCompleted			: BOOL;
	ChargingRunOutTMR_TON	: TON;
	ChargingRunOutTMR_ET	: TIME;
	ChargeRunOutTMR_TON		: TON;
	ChargeRunOutTMR_ET		: TIME;
		
	ReadyToCharge 			: BOOL;
	StartChargingBroadcast	: BOOL := FALSE;
	StartCharger			: ARRAY[1..8] OF BOOL;
	i : INT := 1; // charger 1-8
	j : INT := 1; // section 1 - 3
	k : INT := 1;
	
	ChargeTimeFinished		: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Critical Delay Time
HMI_DB.ChargerHVOFF_rlyDelayPT := INT_TO_TIME(HMI_DB.ChargerHVOFF_rlyDelayPT_INT);
AbortPSnRlyDelay_PT := HMI_DB.ChargerHVOFF_rlyDelayPT;
//hv output delay
HMI_DB.HVONdelayPT := INT_TO_TIME (HMI_DB.HVONdelayPT_INT);
ChargeRlyDelayON_PT := HMI_DB.HVONdelayPT;
//runout timer
HMI_DB.RunOutTMR_PT := INT_TO_TIME (HMI_DB.RunOutTMR_PT_INT*1000);
HMI_DB.RunOutTMR_elapse := (TIME_TO_INT (HMI_DB.RunOutTMR_PT - ChargeRunOutTMR_TON.ET))/1000;
//charge realy timer 
ChargeRlyDelayON_Timer(PT := ChargeRlyDelayON_PT);

//screen room asks to go to idle, it will go to safe state.
IF MCP_IO.RemoteModeSelected = TRUE AND eCommand = E_Command.IDLE AND Trips_DB.NoFaultDetected = TRUE 
	THEN
		ePulseState := E_PulseState.SAFE;
END_IF;
	//at anypoint if screen room wants abort or hmi abort pb is pressed
IF eCommand = E_Command.ABORT OR HMI_DB.AbortPB = TRUE //OR Trips_DB.AnyEstopPressed = TRUE 
		THEN
	 		ePulseState := E_PulseState.ABORT;
END_IF;

IF Trips_DB.NoFaultDetected = FALSE 
		THEN
			ePulseState := E_PulseState.TRIPPED;
END_IF;

IF GVL.RemoteModeSelected = FALSE THEN
	ePulseState := E_PulseState.LOCALMODE;
END_IF;


//lift machine GND
IF Permissives_DB.AllSectCapsDischarged = FALSE THEN //at least one cap has voltage >10V
	MCP_IO.LiftMachineGND := TRUE;
	ELSE
		MCP_IO.LiftMachineGND := FALSE;
END_IF;

CASE ePulseState OF 
	
	//Safe OR IDLE
	E_PulseState.SAFE: 
					//TURN OFF ALL CHARGERS
					FOR i := 1 TO 8 BY 1 DO 
						MCP_IO.Charger[i].HV_ON := FALSE; 
						MCP_IO.Charger[i].inhibit := TRUE; // inhibit = high, no output | inhibit = low, allows output
						StartCharger[i] := FALSE; // reset bit
						ChargeTimeFinished := FALSE;
						StartChargingBroadcast := FALSE;
						//reset charger delay timer
						ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
						ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE); 
						ChargeTime_DB.PreFormChargeTime_TON (IN := FALSE, PT := ChargeTime_DB.PreFormChargeTime_PT, ET => ChargeTime_DB.PreFormChargeTime_ET);

					END_FOR;
					MCP_IO.GLS1_hvON := FALSE;
					MCP_IO.GLS2_hvON := FALSE;
					MCP_IO.GLS3_hvON := FALSE;
					//start delay
					IF Permissives_DB.AllChargerHVisON = FALSE THEN 
						ChargeRlyDelayON_Timer (IN := TRUE, PT := ChargeRlyDelayON_PT);	
						ELSE
							ChargeRlyDelayON_Timer (IN := FALSE, PT := ChargeRlyDelayON_PT);				
					END_IF;
					
					IF ChargeRlyDelayON_Timer.Q = TRUE THEN 
						FOR j := 1 TO 3 BY 1 DO 
							//Open all charge relays after 250ms
							LCP.Section[j].Peak.CloseChargeRelay1 := FALSE; 
							LCP.Section[j].Peak.CloseChargeRelay2 := FALSE; 
							LCP.Section[j].Sust.CloseChargeRelay1 := FALSE;
							LCP.Section[j].Sust.CloseChargeRelay2 := FALSE;
							//close all dump relays  - for SAFE STATE they can all go together
							LCP.Section[j].Peak.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Peak.OpenDumpRelay2 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay2 := FALSE;	
						END_FOR;
						//open all charge rly on form
						LCP.Section[4].Form.CloseChargeRelay1 := FALSE;
						LCP.Section[4].Form.CloseChargeRelay2 := FALSE;
						LCP.Section[4].Form.CloseFormTrigChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormTrigChargeRly := FALSE;
						//close all dump relay on form
						LCP.Section[4].Form.OpenDumpRelay1 := FALSE;
						LCP.Section[4].Form.OpenDumpRelay2 := FALSE;
						LCP.Section[4].Form.OpenPreFormDumpRly := FALSE;
						LCP.Section[4].Form.OpenFormTrigDumpRly1 := FALSE;
						LCP.Section[4].Form.OpenPreFormTrigDumpRly1 := FALSE;
						
						ChargeRlyDelayON_Timer (IN := FALSE);
					END_IF;
					// short contacts engaged as a permissives to say it is safe???????
					//send status to screen room
					eStatus := E_Status.SAFE;
					
					IF Trips_DB.NoFaultDetected = TRUE AND 
						Permissives_DB.NoShortingUnknowns AND 
						Permissives_DB.AllShortContactEngaged = FALSE
						THEN 
							ReadyToCharge := TRUE;
							ELSE
								ReadyToCharge := FALSE;		
					END_IF;
					//wait for command from screen room
					IF GVL.RemoteModeSelected = TRUE AND ReadyToCharge = TRUE AND eCommand = E_Command.CHARGE 
						THEN
							ePulseState := E_PulseState.CHARGING;
						ELSIF MCP_IO.RemoteModeSelected = TRUE AND eCommand = E_Command.IDLE THEN
							ePulseState := E_PulseState.SAFE;
						ELSIF MCP_IO.RemoteModeSelected = TRUE AND eCommand = E_Command.DUMP THEN
							ePulseState := E_PulseState.DISCONNECTING;
					END_IF;
					
	
	//Charging
	E_PulseState.CHARGING: 
					MCP_IO.LiftMachineGND := TRUE; //call the bit again in case it did not lift
					//start charging runout timer
					ChargingRunOutTMR_TON (IN := TRUE, PT := (ChargeTime_DB.LongestChargeTime_PT + HMI_DB.RunOutTMR_PT), ET => ChargingRunOutTMR_ET);
	
					//will need the charge time sequence to see stagger each bank's charge time......done
					IF Trips_DB.NoFaultDetected = TRUE THEN 
						FOR j := 1 TO 3 BY 1 DO 
							//Open all dump relays  
							LCP.Section[j].Peak.OpenDumpRelay1 := TRUE;
							LCP.Section[j].Peak.OpenDumpRelay2 := TRUE;
							LCP.Section[j].Sust.OpenDumpRelay1 := TRUE;
							LCP.Section[j].Sust.OpenDumpRelay2 := TRUE;	
						END_FOR;
						//open all dump relay on form
						LCP.Section[4].Form.OpenDumpRelay1 := TRUE;
						LCP.Section[4].Form.OpenDumpRelay2 := TRUE;
						LCP.Section[4].Form.OpenPreFormDumpRly := TRUE;
						LCP.Section[4].Form.OpenFormTrigDumpRly1 := TRUE;
						LCP.Section[4].Form.OpenPreFormTrigDumpRly1 := TRUE;
						//if all dump relays open then close charger relays
						IF Permissives_DB.AllDumpRelaysOpen = TRUE THEN 
							//close all charge rly 
							FOR j := 1 TO 3 BY 1 DO  
								LCP.Section[j].Peak.CloseChargeRelay1 := TRUE; 
								LCP.Section[j].Peak.CloseChargeRelay2 := TRUE; 
								LCP.Section[j].Sust.CloseChargeRelay1 := TRUE;
								LCP.Section[j].Sust.CloseChargeRelay2 := TRUE;	
							END_FOR;
							//close all charge rly on form
							LCP.Section[4].Form.CloseChargeRelay1 := TRUE;
							LCP.Section[4].Form.CloseChargeRelay2 := TRUE;
							LCP.Section[4].Form.CloseFormTrigChargeRly := TRUE;
							LCP.Section[4].Form.ClosePreFormChargeRly := TRUE;
							LCP.Section[4].Form.ClosePreFormTrigChargeRly := TRUE;
						END_IF;	
					END_IF;
					
					IF Trips_DB.NoFaultDetected = TRUE AND Permissives_DB.AllChargeRelaysClosed = TRUE 
						THEN 
							ChargeRlyDelayON_Timer (IN := TRUE, PT := ChargeRlyDelayON_PT);
							ELSE
								ChargeRlyDelayON_Timer (IN := FALSE, PT := ChargeRlyDelayON_PT);
					END_IF;
					//start broadcasting on charger timer
					IF ChargeRlyDelayON_Timer.Q = TRUE THEN 
						StartChargingBroadcast := TRUE;
					END_IF;
					//start timer 
					IF StartChargingBroadcast = TRUE THEN 
						//start total charge time TIMER
						ChargeTime_DB.LongestChargeTime_TON (IN := TRUE, PT := ChargeTime_DB.LongestChargeTime_PT, ET => ChargeTime_DB.LongestChargeTime_ET);
						//Turn inhibit On on all chargers and start timer
						(*FOR i := 1 TO 8 BY 1 DO 
							//MCP_IO.Charger[i].inhibit := TRUE; 
							// delay stagger starts here 

							//ChargeTime_DB.ChargerDelay_TON[i] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
						END_FOR;*)
						// delay stagger starts here 
						ChargeTime_DB.ChargerDelay_TON[1] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[1], ET => ChargeTime_DB.ChargerDelay_ET[1]);
						ChargeTime_DB.ChargerDelay_TON[2] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[2], ET => ChargeTime_DB.ChargerDelay_ET[2]);
						ChargeTime_DB.ChargerDelay_TON[3] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[3], ET => ChargeTime_DB.ChargerDelay_ET[3]);
						ChargeTime_DB.ChargerDelay_TON[4] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[4], ET => ChargeTime_DB.ChargerDelay_ET[4]);
						ChargeTime_DB.ChargerDelay_TON[5] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[5], ET => ChargeTime_DB.ChargerDelay_ET[5]);
						ChargeTime_DB.ChargerDelay_TON[6] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[6], ET => ChargeTime_DB.ChargerDelay_ET[6]);
						ChargeTime_DB.ChargerDelay_TON[7] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[7], ET => ChargeTime_DB.ChargerDelay_ET[7]);
						ChargeTime_DB.ChargerDelay_TON[8] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[8], ET => ChargeTime_DB.ChargerDelay_ET[8]);
						ChargeTime_DB.PreFormChargeTime_TON (IN := TRUE, PT := ChargeTime_DB.PreFormChargeTime_PT, ET => ChargeTime_DB.PreFormChargeTime_ET);
						ChargeRlyDelayON_Timer (IN := FALSE);
					ELSE
						//Turn inhibit High on all chargers and turn off all timer if no broadcasting
						FOR i := 1 TO 8 BY 1 DO 
							MCP_IO.Charger[i].inhibit := TRUE; 
							// turn off timer
							ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
						END_FOR;
						ChargeTime_DB.PreFormChargeTime_TON (IN := FALSE, PT := ChargeTime_DB.PreFormChargeTime_PT, ET => ChargeTime_DB.PreFormChargeTime_ET);	
						ChargeTime_DB.LongestChargeTime_TON (IN := FALSE); //reset timer							
					END_IF;
					
					//turn on HV output to load	
					FOR k := 1 TO 8 BY 1 DO
						IF ChargeTime_DB.ChargerDelay_TON[k].Q = TRUE THEN
							StartCharger[k] := TRUE;
						END_IF;
						
						IF StartCharger[k] = TRUE THEN
							MCP_IO.Charger[k].HV_ON := TRUE; 
							MCP_IO.Charger[k].inhibit := FALSE;
							ChargeTime_DB.ChargerDelay_TON[k] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[k], ET => ChargeTime_DB.ChargerDelay_ET[k]);
							//start time elapse
							ChargeTime_DB.ChargingTimeElapse_TON[k] (IN := TRUE, PT := REAL_TO_TIME (1000*MCP_IO.Charger[k].ChargeTime.timeToChargeLoad));
						END_IF;
						
						IF ChargeTime_DB.ChargingTimeElapse_TON[k].Q THEN
							StartCharger[k] := FALSE;
							ChargeTime_DB.ChargingTimeElapse_TON[k] (IN := FALSE); 
						END_IF;
					END_FOR
					//GLS 3
					IF ChargeTime_DB.PreFormChargeTime_TON.Q = TRUE THEN
						MCP_IO.GLS3_hvON := TRUE;
						ChargeTime_DB.PreFormChargeTime_TON (IN := FALSE, PT := ChargeTime_DB.PreFormChargeTime_PT, ET => ChargeTime_DB.PreFormChargeTime_ET);
						//for hmi
						ChargeTime_DB.PreFormChargingTimeElapse_TON (IN := TRUE, PT := ChargeTime_DB.PreFormChargeTime_PT);
					END_IF
						
					//turn off inhibit when HV is on
					(*IF Permissives_DB.AllChargerHVisON = TRUE THEN
						FOR i := 1 TO 8 BY 1 DO 
							MCP_IO.Charger[i].inhibit := FALSE; //start current output
						END_FOR;
						//StartChargingBroadcast := FALSE; // reset the broadcast bit whne all chargers 
					END_IF*)
					IF ChargingRunOutTMR_TON.Q = TRUE THEN
						Trips_DB.ChargingTimerRunout := TRUE;
					END_IF
					
					IF Trips_DB.AnyLossHVONsignal = TRUE OR Trips_DB.ChargingTimerRunout = TRUE THEN 
						StartChargingBroadcast := FALSE; // reset the broadcast bit whne all chargers
						ChargeTimeFinished := FALSE; //reset chargetime done bit
						ChargingRunOutTMR_TON (IN := FALSE);
						FOR i := 1 TO 8 BY 1 DO 
							ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE);							
						END_FOR
						ChargeTime_DB.PreFormChargingTimeElapse_TON (IN := FALSE);
						ePulseState := E_PulseState.TRIPPED; 
					END_IF
					//send status to screen room
					eStatus := E_Status.CHARGING;
					
					IF ChargeTime_DB.LongestChargeTime_TON.Q = TRUE THEN 
						ChargeTimeFinished := TRUE;
						ChargeTime_DB.LongestChargeTime_TON (IN := FALSE); //reset timer
					END_IF
					
					IF ChargeTimeFinished = TRUE THEN 
						//reset elapse timer
						FOR i := 1 TO 8 BY 1 DO 
							ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE);							
						END_FOR
						ChargeTime_DB.PreFormChargingTimeElapse_TON (IN := FALSE);
					END_IF
					//condition for charge complete
					IF Permissives_DB.AllChargerEOC = TRUE AND ChargeTimeFinished = TRUE AND Permissives_DB.AllSectCapsFullyCharged = TRUE THEN 
						ChargeCompleted := TRUE;
						ELSE
							ChargeCompleted := FALSE;					
					END_IF
					
					//if cap voltage feedback >= charger setpoints && EOC && all timer runout then chargecomplete
					IF ChargeCompleted = TRUE THEN 
						MCP_IO.GLS1_hvON := TRUE; //turn on spark gap charger
						MCP_IO.GLS2_hvON := TRUE;
						FOR i := 1 TO 8 BY 1 DO 
							MCP_IO.Charger[i].HV_ON := FALSE; 
							MCP_IO.Charger[i].inhibit := TRUE;
							StartCharger[i] := FALSE;
							ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE);	
							//ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
						END_FOR;
						ChargeTime_DB.PreFormChargeTime_TON (IN := FALSE, PT := ChargeTime_DB.PreFormChargeTime_PT, ET => ChargeTime_DB.PreFormChargeTime_ET);
						StartChargingBroadcast := FALSE; // reset the broadcast bit whne all chargers 
						ChargeTimeFinished := FALSE; //reset chargetime done bit
						ePulseState := E_PulseState.CHARGECOMPLETE;
					ELSE
						MCP_IO.GLS1_hvON := FALSE; //turn off spark gap charger when charge is not complete
						MCP_IO.GLS2_hvON := FALSE;
					END_IF
	//Charge complete
	E_PulseState.CHARGECOMPLETE: 
					//do something
					ChargeCompleted := FALSE; //reset bit
					ChargeRunOutTMR_TON (IN := TRUE, PT := HMI_DB.RunOutTMR_PT);
					
					IF ChargeRunOutTMR_TON.Q = TRUE THEN
						Trips_DB.ChargedTimerRunout := TRUE;
						ChargeRunOutTMR_TON (IN := FALSE, PT := HMI_DB.RunOutTMR_PT);
						ePulseState := E_PulseState.DUMPING;
					END_IF
					//turn off charger HV and inhibit 
					FOR i := 1 TO 8 BY 1 DO 
						MCP_IO.Charger[i].HV_ON := FALSE; 
						MCP_IO.Charger[i].inhibit := TRUE;
						ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
					END_FOR
					MCP_IO.GLS3_hvON := FALSE;
					ChargeTime_DB.PreFormChargeTime_TON(IN := FALSE);
					//keep dump relays open, 
					//open charge relays.
					//start run out timer
	
	//Disconnecting
	E_PulseState.DISCONNECTING:
					//do something


	//Dumping
	E_PulseState.DUMPING:  
					//do something
					//TURN OFF ALL CHARGERS
					FOR i := 1 TO 8 BY 1 DO 
						MCP_IO.Charger[i].HV_ON := FALSE; 
						MCP_IO.Charger[i].inhibit := TRUE; 					
						ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE); //reset charging time elapse
					END_FOR;
					MCP_IO.GLS1_hvON := FALSE;
					MCP_IO.GLS2_hvON := FALSE;
					MCP_IO.GLS3_hvON := FALSE;
					ChargeTime_DB.PreFormChargingTimeElapse_TON (IN := FALSE);
					//start delay
					AbortPSnRlyDelay_Timer (IN := TRUE, PT := AbortPSnRlyDelay_PT);					
					
					IF AbortPSnRlyDelay_Timer.Q = TRUE THEN 
						AbortPSnRlyDelayDONE := TRUE;
						AbortPSnRlyDelay_Timer (IN := FALSE);
					END_IF;
					
					IF 	AbortPSnRlyDelayDONE = TRUE THEN
						FOR j := 1 TO 3 BY 1 DO 
							//Open all charge relays
							LCP.Section[j].Peak.CloseChargeRelay1 := FALSE; 
							LCP.Section[j].Peak.CloseChargeRelay2 := FALSE; 
							LCP.Section[j].Sust.CloseChargeRelay1 := FALSE;
							LCP.Section[j].Sust.CloseChargeRelay2 := FALSE;
							//close all dump relays  - for SAFE STATE they can all go together
							LCP.Section[j].Peak.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Peak.OpenDumpRelay2 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay2 := FALSE;	
						END_FOR;
						//open all charge rly on form
						LCP.Section[4].Form.CloseChargeRelay1 := FALSE;
						LCP.Section[4].Form.CloseChargeRelay2 := FALSE;
						LCP.Section[4].Form.CloseFormTrigChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormTrigChargeRly := FALSE;
						//close all dump relay on form
						LCP.Section[4].Form.OpenDumpRelay1 := FALSE;
						LCP.Section[4].Form.OpenDumpRelay2 := FALSE;
						LCP.Section[4].Form.OpenPreFormDumpRly := FALSE;
						LCP.Section[4].Form.OpenFormTrigDumpRly1 := FALSE;
						LCP.Section[4].Form.OpenPreFormTrigDumpRly1 := FALSE;
						
						AbortPSnRlyDelay_Timer (IN := FALSE);
						AbortPSnRlyDelayDONE := FALSE;
					END_IF;
					
					eStatus := E_Status.DUMPING;
	
	//Abort
	E_PulseState.ABORT: 
					//do something
					//TURN OFF ALL CHARGERS' outputs
					FOR i := 1 TO 8 BY 1 DO 
						MCP_IO.Charger[i].HV_ON := FALSE; 
						MCP_IO.Charger[i].inhibit := TRUE; //active low
						ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE);  
					END_FOR;
					MCP_IO.GLS1_hvON := FALSE;
					MCP_IO.GLS2_hvON := FALSE;
					MCP_IO.GLS3_hvON := FALSE;
					//start delay
					AbortPSnRlyDelay_Timer (IN := TRUE, PT := AbortPSnRlyDelay_PT);					
					
					IF AbortPSnRlyDelay_Timer.Q = TRUE THEN 
						FOR j := 1 TO 3 BY 1 DO 
							//Open all charge relays
							LCP.Section[j].Peak.CloseChargeRelay1 := FALSE; 
							LCP.Section[j].Peak.CloseChargeRelay2 := FALSE; 
							LCP.Section[j].Sust.CloseChargeRelay1 := FALSE;
							LCP.Section[j].Sust.CloseChargeRelay2 := FALSE;
							//close all dump relays  - for SAFE STATE they can all go together
							LCP.Section[j].Peak.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Peak.OpenDumpRelay2 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay2 := FALSE;	
						END_FOR;
						//open all charge rly on form
						LCP.Section[4].Form.CloseChargeRelay1 := FALSE;
						LCP.Section[4].Form.CloseChargeRelay2 := FALSE;
						LCP.Section[4].Form.CloseFormTrigChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormTrigChargeRly := FALSE;
						//close all dump relay on form
						LCP.Section[4].Form.OpenDumpRelay1 := FALSE;
						LCP.Section[4].Form.OpenDumpRelay2 := FALSE;
						LCP.Section[4].Form.OpenPreFormDumpRly := FALSE;
						LCP.Section[4].Form.OpenFormTrigDumpRly1 := FALSE;
						LCP.Section[4].Form.OpenPreFormTrigDumpRly1 := FALSE;
						
						AbortPSnRlyDelay_Timer (IN := FALSE);		
					END_IF;
	
					eStatus := E_Status.ABORT;
					//logic to go back to safe state.
					IF (Trips_DB.NoFaultDetected = TRUE AND 
						Permissives_DB.AllDumpRelaysOpen = FALSE AND 
						Permissives_DB.AllChargeRelaysClosed = FALSE AND
						Permissives_DB.AllChargerHVisON = FALSE) OR (eCommand = E_Command.IDLE AND MCP_IO.RemoteModeSelected = TRUE)
						THEN 
							ePulseState := E_PulseState.SAFE;	
					END_IF;
					
	//Abort
	E_PulseState.TRIPPED: 
					eStatus := E_Status.TRIPPED;
					//do something here
					ChargingRunOutTMR_TON (IN := FALSE);
					//logic to go back to safe state.
					IF (Trips_DB.NoFaultDetected = TRUE OR HMI_DB.NoFaultDetectedBP = TRUE) AND 
						(Permissives_DB.AllDumpRelaysOpen = FALSE OR HMI_DB.AllDumpRelaysOpenBP = TRUE) AND 
						(Permissives_DB.AllChargeRelaysClosed = FALSE OR HMI_DB.AllChargeRelayCloseBP = TRUE) AND
						Permissives_DB.AllChargerHVisON = FALSE  AND
						(Permissives_DB.SafetyOK = TRUE OR HMI_DB.SafetyOKBP = TRUE)
						THEN 
							ePulseState := E_PulseState.SAFE;	
					END_IF;
	//lOCAL MODE
	E_PulseState.LOCALMODE:
					eStatus := E_Status.LOCAL_MODE;
					IF HMI_DB.CloseAllChargeRlyPB = TRUE AND Trips_DB.NoFaultDetected = TRUE AND Permissives_DB.AllChargerHVisON = FALSE THEN
						FOR j := 1 TO 3 BY 1 DO 
							//Open all charge relays
							LCP.Section[j].Peak.CloseChargeRelay1 := TRUE; 
							LCP.Section[j].Peak.CloseChargeRelay2 := TRUE; 
							LCP.Section[j].Sust.CloseChargeRelay1 := TRUE;
							LCP.Section[j].Sust.CloseChargeRelay2 := TRUE;
						END_FOR;
						//open all charge rly on form
						LCP.Section[4].Form.CloseChargeRelay1 := TRUE;
						LCP.Section[4].Form.CloseChargeRelay2 := TRUE;
						LCP.Section[4].Form.CloseFormTrigChargeRly := TRUE;
						LCP.Section[4].Form.ClosePreFormChargeRly := TRUE;
						LCP.Section[4].Form.ClosePreFormTrigChargeRly := TRUE;
					ELSE
						FOR j := 1 TO 3 BY 1 DO 
							//Open all charge relays
							LCP.Section[j].Peak.CloseChargeRelay1 := FALSE; 
							LCP.Section[j].Peak.CloseChargeRelay2 := FALSE; 
							LCP.Section[j].Sust.CloseChargeRelay1 := FALSE;
							LCP.Section[j].Sust.CloseChargeRelay2 := FALSE;
						END_FOR;
						//open all charge rly on form
						LCP.Section[4].Form.CloseChargeRelay1 := FALSE;
						LCP.Section[4].Form.CloseChargeRelay2 := FALSE;
						LCP.Section[4].Form.CloseFormTrigChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormChargeRly := FALSE;
						LCP.Section[4].Form.ClosePreFormTrigChargeRly := FALSE;	
					END_IF;
					
					IF HMI_DB.OpenAllDumpRlyPB = TRUE AND Trips_DB.NoFaultDetected = TRUE AND Permissives_DB.AllChargerHVisON = FALSE THEN
						FOR j := 1 TO 3 BY 1 DO 
							//open all dump relays  - for SAFE STATE they can all go together
							LCP.Section[j].Peak.OpenDumpRelay1 := TRUE;
							LCP.Section[j].Peak.OpenDumpRelay2 := TRUE;
							LCP.Section[j].Sust.OpenDumpRelay1 := TRUE;
							LCP.Section[j].Sust.OpenDumpRelay2 := TRUE;	
						END_FOR;	
						//close all dump relay on form
						LCP.Section[4].Form.OpenDumpRelay1 := TRUE;
						LCP.Section[4].Form.OpenDumpRelay2 := TRUE;
						LCP.Section[4].Form.OpenPreFormDumpRly := TRUE;
						LCP.Section[4].Form.OpenFormTrigDumpRly1 := TRUE;
						LCP.Section[4].Form.OpenPreFormTrigDumpRly1 := TRUE;					
					ELSE
						FOR j := 1 TO 3 BY 1 DO 
							//open all dump relays  - for SAFE STATE they can all go together
							LCP.Section[j].Peak.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Peak.OpenDumpRelay2 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay1 := FALSE;
							LCP.Section[j].Sust.OpenDumpRelay2 := FALSE;	
						END_FOR;	
						//close all dump relay on form
						LCP.Section[4].Form.OpenDumpRelay1 := FALSE;
						LCP.Section[4].Form.OpenDumpRelay2 := FALSE;
						LCP.Section[4].Form.OpenPreFormDumpRly := FALSE;
						LCP.Section[4].Form.OpenFormTrigDumpRly1 := FALSE;
						LCP.Section[4].Form.OpenPreFormTrigDumpRly1 := FALSE;	
					END_IF;
					
					IF HMI_DB.LiftMachineGNDsw = TRUE AND Trips_DB.NoFaultDetected = TRUE THEN
						MCP_IO.LiftMachineGND := TRUE;
						ELSE
							MCP_IO.LiftMachineGND := FALSE;
					END_IF;
					
					IF GVL.RemoteModeSelected = TRUE THEN 
						ePulseState := E_PulseState.SAFE;
					END_IF
END_CASE;


IF i > 8 THEN
	i := 1;
END_IF

IF j > 3 THEN
	j := 1;
END_IF

IF k > 8 THEN
	k := 1;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Sequence">
      <LineId Id="329" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="684" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="697" Count="1" />
      <LineId Id="484" Count="1" />
      <LineId Id="144" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="725" Count="1" />
      <LineId Id="722" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="456" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="1022" Count="2" />
      <LineId Id="885" Count="1" />
      <LineId Id="1021" Count="0" />
      <LineId Id="881" Count="0" />
      <LineId Id="1020" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="80" Count="2" />
      <LineId Id="253" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="926" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="3" />
      <LineId Id="77" Count="0" />
      <LineId Id="92" Count="5" />
      <LineId Id="115" Count="5" />
      <LineId Id="89" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="99" Count="2" />
      <LineId Id="123" Count="1" />
      <LineId Id="130" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="137" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="427" Count="3" />
      <LineId Id="142" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="338" Count="1" />
      <LineId Id="345" Count="5" />
      <LineId Id="375" Count="4" />
      <LineId Id="374" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="381" Count="2" />
      <LineId Id="387" Count="2" />
      <LineId Id="384" Count="1" />
      <LineId Id="415" Count="0" />
      <LineId Id="352" Count="4" />
      <LineId Id="390" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="391" Count="2" />
      <LineId Id="395" Count="2" />
      <LineId Id="394" Count="0" />
      <LineId Id="398" Count="1" />
      <LineId Id="765" Count="2" />
      <LineId Id="769" Count="0" />
      <LineId Id="825" Count="1" />
      <LineId Id="783" Count="1" />
      <LineId Id="782" Count="0" />
      <LineId Id="785" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="770" Count="0" />
      <LineId Id="780" Count="0" />
      <LineId Id="894" Count="8" />
      <LineId Id="781" Count="0" />
      <LineId Id="793" Count="1" />
      <LineId Id="796" Count="6" />
      <LineId Id="880" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="803" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="888" Count="0" />
      <LineId Id="891" Count="1" />
      <LineId Id="1008" Count="0" />
      <LineId Id="1007" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="968" Count="0" />
      <LineId Id="976" Count="0" />
      <LineId Id="889" Count="0" />
      <LineId Id="997" Count="0" />
      <LineId Id="1013" Count="1" />
      <LineId Id="1016" Count="0" />
      <LineId Id="1015" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="788" Count="1" />
      <LineId Id="791" Count="0" />
      <LineId Id="805" Count="0" />
      <LineId Id="1051" Count="0" />
      <LineId Id="1050" Count="0" />
      <LineId Id="792" Count="0" />
      <LineId Id="960" Count="6" />
      <LineId Id="408" Count="0" />
      <LineId Id="1053" Count="2" />
      <LineId Id="444" Count="2" />
      <LineId Id="873" Count="0" />
      <LineId Id="876" Count="0" />
      <LineId Id="978" Count="2" />
      <LineId Id="1052" Count="0" />
      <LineId Id="808" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="839" Count="2" />
      <LineId Id="879" Count="0" />
      <LineId Id="842" Count="0" />
      <LineId Id="827" Count="0" />
      <LineId Id="1076" Count="0" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1079" Count="2" />
      <LineId Id="1077" Count="1" />
      <LineId Id="828" Count="0" />
      <LineId Id="836" Count="0" />
      <LineId Id="838" Count="0" />
      <LineId Id="871" Count="1" />
      <LineId Id="830" Count="0" />
      <LineId Id="824" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="809" Count="1" />
      <LineId Id="819" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="821" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="981" Count="0" />
      <LineId Id="822" Count="0" />
      <LineId Id="818" Count="0" />
      <LineId Id="823" Count="0" />
      <LineId Id="820" Count="0" />
      <LineId Id="817" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="983" Count="2" />
      <LineId Id="691" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="982" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="686" Count="0" />
      <LineId Id="692" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="695" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="658" Count="0" />
      <LineId Id="811" Count="1" />
      <LineId Id="967" Count="0" />
      <LineId Id="816" Count="0" />
      <LineId Id="813" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1083" Count="0" />
      <LineId Id="659" Count="1" />
      <LineId Id="663" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="30" Count="3" />
      <LineId Id="29" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="198" Count="3" />
      <LineId Id="988" Count="0" />
      <LineId Id="202" Count="3" />
      <LineId Id="1059" Count="0" />
      <LineId Id="206" Count="3" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1071" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1072" Count="0" />
      <LineId Id="210" Count="25" />
      <LineId Id="1073" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="37" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="159" Count="3" />
      <LineId Id="1019" Count="0" />
      <LineId Id="163" Count="4" />
      <LineId Id="313" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="171" Count="23" />
      <LineId Id="297" Count="2" />
      <LineId Id="40" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="278" Count="2" />
      <LineId Id="272" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="281" Count="2" />
      <LineId Id="287" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="304" Count="5" />
      <LineId Id="664" Count="0" />
      <LineId Id="310" Count="1" />
      <LineId Id="303" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="522" Count="3" />
      <LineId Id="527" Count="4" />
      <LineId Id="537" Count="6" />
      <LineId Id="549" Count="0" />
      <LineId Id="551" Count="11" />
      <LineId Id="550" Count="0" />
      <LineId Id="285" Count="1" />
      <LineId Id="564" Count="1" />
      <LineId Id="596" Count="3" />
      <LineId Id="570" Count="1" />
      <LineId Id="606" Count="4" />
      <LineId Id="605" Count="0" />
      <LineId Id="578" Count="1" />
      <LineId Id="611" Count="10" />
      <LineId Id="584" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="637" Count="2" />
      <LineId Id="641" Count="1" />
      <LineId Id="640" Count="0" />
      <LineId Id="727" Count="3" />
      <LineId Id="19" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="72" Count="2" />
      <LineId Id="70" Count="0" />
      <LineId Id="1002" Count="2" />
      <LineId Id="1001" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>