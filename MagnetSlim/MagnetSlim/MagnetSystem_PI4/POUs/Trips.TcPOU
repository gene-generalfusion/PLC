<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Trips" Id="{4df83c48-b93a-45f7-abb7-3e8fd700423f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Trips
VAR
	bTest							: BOOL;
	//delay2s : Delay2s;
	evtLogger						: FB_TcEventLogger;
	
	ACintLockRlyFaultDelay_PT		: TIME := T#2S;
	HVisoRlyFaultDelay_PT			: TIME := T#2S;
	DumpRly1FaultDelay_PT			: TIME := T#2S;
	//DumpRly2FaultDelay_PT			: TIME := T#2S;
	ChrgRlyFaultDelay_PT			: TIME := T#2S;
	stControl						: ST_Control;
	
	i : INT := 1; //coil num 1-10
	j : INT := 1; //cap num 1-10 or 15
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//AI channel reading faults.

//******************** Coil 1 - Charger Voltage Instrument Fault
IF InstrumentReading.R2_01_CH00 <= 0.0 THEN
	Devices.Coil[1].ChargerVoltageFault_TON (IN := TRUE, PT := T#2S);
	Trips_DB.Coil[1].chargerVoltageReadingFaulted := Devices.Coil[1].ChargerVoltageFault_TON.Q;
ELSE 
	Devices.Coil[1].ChargerVoltageFault_TON (IN := FALSE);
	Trips_DB.Coil[1].chargerVoltageReadingFaulted := FALSE;
END_IF;


//Coil1.currentFeedback := SEL(bTest, Coil1.currentFeedback, 200);  

//********************Coil 1 - Current Instrument Fault
IF InstrumentReading.R2_01_CH01 <= 0.0 THEN
	Devices.Coil[1].CurrentSensorFault_TON (IN := TRUE, PT := T#2S);
	Trips_DB.Coil[1].CurrentReadingFaulted := Devices.Coil[1].CurrentSensorFault_TON.Q;
ELSE 
	Devices.Coil[1].CurrentSensorFault_TON (IN := FALSE);
	Trips_DB.Coil[1].CurrentReadingFaulted := FALSE;
END_IF


//********************Coil 1 - B-field Instrument Fault  --  this one is a good one.
(*
IF InstrumentReading.R2_01_CH02 <= 0.0 THEN
	Devices.Coil[1].BfieldSensorFault_TON (IN := TRUE, PT := T#2S);
	Trips_DB.Coil1_BfieldReadingFaulted := Devices.Coil[1].BfieldSensorFault_TON.Q;
ELSE 
	Devices.Coil[1].BfieldSensorFault_TON (IN := FALSE);
	Trips_DB.Coil1_BfieldReadingFaulted := FALSE;   
END_IF
*)

//Instrumentation Faults
FOR i := 1 TO 10 BY 1 DO
	IF Trips_DB.Coil[i].ChargerVoltageReadingFaulted = TRUE //OR
		//Trips_DB.Coil[i].currentReadingFaulted = TRUE OR  //-- commented out for PI3
		//Trips_DB.Coil[i].BfieldReadingFaulted = TRUE
		THEN
			Trips_DB.InstrumentationFaulted := TRUE;
	END_IF;
END_FOR;

//********************Relay fail to close Trips
FOR i := 1 TO 10 BY 1 DO
	//check to see if AC interlock relay fail to close
	IF Devices.Coil[i].CloseACInterlockRly = TRUE AND Devices.Coil[i].AC_Interlock_RlyClose = FALSE AND Devices.Coil[i].CoilEnabled = TRUE THEN
		Trips_DB.Coil[i].ACintLockRlyCloseFaultDelay_TON (IN := TRUE, PT := ACintLockRlyFaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].ACintLockRlyCloseFaultDelay_TON (IN := FALSE, PT := ACintLockRlyFaultDelay_PT);
	END_IF;
	IF Trips_DB.Coil[i].ACintLockRlyCloseFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].ACInterlockRelayFailedtoClose := TRUE;	
		Trips_DB.Coil[i].ACintLockRlyCloseFaultDelay_TON (IN := FALSE, PT := ACintLockRlyFaultDelay_PT);
	END_IF;
	
	//hv iso 
	IF Devices.Coil[i].CloseHVisolationRelay = TRUE AND Devices.Coil[i].HVisolationRelayClosed = FALSE AND Devices.Coil[i].CoilEnabled = TRUE THEN
		Trips_DB.Coil[i].HVRelayCloseFaultDelay_TON (IN := TRUE, PT := HVisoRlyFaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].HVRelayCloseFaultDelay_TON (IN := FALSE, PT := HVisoRlyFaultDelay_PT);
	END_IF
	
	IF Trips_DB.Coil[i].HVRelayCloseFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].HVisoRelayFailedToClose := TRUE; 
		Trips_DB.Coil[i].HVRelayCloseFaultDelay_TON (IN := FALSE);
	END_IF;

	IF Devices.Coil[i].CloseHVisolationRelay = FALSE AND Devices.Coil[i].HVisolationRelayClosed = TRUE AND Devices.Coil[i].CoilEnabled = TRUE THEN
		Trips_DB.Coil[i].HVRelayOpenFaultDelay_TON (IN := TRUE, PT := HVisoRlyFaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].HVRelayOpenFaultDelay_TON (IN := FALSE, PT := HVisoRlyFaultDelay_PT);
	END_IF
	
	IF Trips_DB.Coil[i].HVRelayOpenFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].HVisoRelayFailedToOpen := TRUE; 
		Trips_DB.Coil[i].HVRelayOpenFaultDelay_TON (IN := FALSE, PT := HVisoRlyFaultDelay_PT);
	END_IF
	
	//check to see if Dump relay failed to open
	IF Devices.Coil[i].OpenDumpRelays = TRUE AND 
		(Devices.Coil[i].DumpRelay1_closed = TRUE OR Devices.Coil[i].DumpRelay2_closed = TRUE) AND
		Devices.Coil[i].CoilEnabled = TRUE 
		THEN
			Trips_DB.Coil[i].DumpRlyOpenFaultDelay_TON (IN := TRUE, PT := DumpRly1FaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].DumpRlyOpenFaultDelay_TON (IN := FALSE, PT := DumpRly1FaultDelay_PT);
	END_IF;
	IF Trips_DB.Coil[i].DumpRlyOpenFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].DumpRelay1_FailtoOpen := TRUE;
		Trips_DB.Coil[i].DumpRelay2_FailtoOpen := TRUE;
		Trips_DB.Coil[i].DumpRlyOpenFaultDelay_TON (IN := FALSE, PT := DumpRly1FaultDelay_PT);		
	END_IF;

	//check to see if charge relay failed to close
	IF Devices.Coil[i].closeChargeRelay = TRUE AND Devices.Coil[i].ChargeRelay_closed = FALSE AND Devices.Coil[i].CoilEnabled = TRUE THEN
		Trips_DB.Coil[i].ChrgRlyCloseFaultDelay_TON (IN := TRUE, PT := ChrgRlyFaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].ChrgRlyCloseFaultDelay_TON (IN := FALSE, PT := ChrgRlyFaultDelay_PT);
		END_IF;
	IF Trips_DB.Coil[i].ChrgRlyCloseFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].ChargeRelay_FailtoClose := TRUE;
		Trips_DB.Coil[i].ChrgRlyCloseFaultDelay_TON (IN := FALSE, PT := ChrgRlyFaultDelay_PT);
	END_IF;

	//check to see if AC interlock relay fail to open
	IF Devices.Coil[i].CloseACInterlockRly = FALSE AND Devices.Coil[i].AC_Interlock_RlyClose = TRUE AND Devices.Coil[i].CoilEnabled = TRUE THEN
		Trips_DB.Coil[i].ACintLockRlyOpenFaultDelay_TON (IN := TRUE, PT := ACintLockRlyFaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].ACintLockRlyOpenFaultDelay_TON (IN := FALSE, PT := ACintLockRlyFaultDelay_PT);
		END_IF;
	IF Trips_DB.Coil[i].ACintLockRlyOpenFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].ACInterlockRelayFailedtoOpen := TRUE;	
		Trips_DB.Coil[i].ACintLockRlyOpenFaultDelay_TON (IN := FALSE, PT := ACintLockRlyFaultDelay_PT);//debounce
	END_IF;
	
	//check to see if Dump relay failed to close
	IF Devices.Coil[i].OpenDumpRelays = FALSE AND 
		(Devices.Coil[i].DumpRelay1_closed = FALSE OR Devices.Coil[i].DumpRelay2_closed = FALSE) AND 
		Devices.Coil[i].CoilEnabled = TRUE 
		THEN
			Trips_DB.Coil[i].DumpRlyCloseFaultDelay_TON (IN := TRUE, PT := DumpRly1FaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].DumpRlyCloseFaultDelay_TON (IN := FALSE, PT := DumpRly1FaultDelay_PT);
	END_IF;
	IF Trips_DB.Coil[i].DumpRlyCloseFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].DumpRelay1_FailtoClose := TRUE;
		Trips_DB.Coil[i].DumpRelay2_FailtoClose := TRUE;	
		Trips_DB.Coil[i].DumpRlyCloseFaultDelay_TON (IN := FALSE, PT := DumpRly1FaultDelay_PT);	
	END_IF;
	
	//check to see if charge relay failed to open
	IF Devices.Coil[i].closeChargeRelay = FALSE AND Devices.Coil[i].ChargeRelay_closed = TRUE AND Devices.Coil[i].CoilEnabled = TRUE THEN
		Trips_DB.Coil[i].ChrgRlyOpenFaultDelay_TON (IN := TRUE, PT := ChrgRlyFaultDelay_PT);
		ELSE
			Trips_DB.Coil[i].ChrgRlyOpenFaultDelay_TON (IN := FALSE, PT := ChrgRlyFaultDelay_PT);
		END_IF;
	IF Trips_DB.Coil[i].ChrgRlyOpenFaultDelay_TON.Q = TRUE THEN
		Trips_DB.Coil[i].ChargeRelay_FailtoOpen := TRUE;
		Trips_DB.Coil[i].ChrgRlyOpenFaultDelay_TON (IN := FALSE, PT := ChrgRlyFaultDelay_PT);
	END_IF;
	
	//Any Charge Relay fail to open or close
	IF Trips_DB.Coil[i].ChargeRelay_FailtoClose = TRUE OR Trips_DB.Coil[i].ChargeRelay_FailtoOpen = TRUE THEN
		Trips_DB.AnyChargeRlyFail := TRUE;
	END_IF;
	//Any Dump relay fail to open or close
	IF Trips_DB.Coil[i].DumpRelay1_FailtoClose = TRUE OR Trips_DB.Coil[i].DumpRelay1_FailtoOpen = TRUE OR 
		Trips_DB.Coil[i].DumpRelay2_FailtoClose = TRUE OR Trips_DB.Coil[i].DumpRelay2_FailtoOpen = TRUE
		THEN
			Trips_DB.AnyDumpRlyFail := TRUE;
	END_IF;
	//Any ac relay fail to open or close
	IF Trips_DB.Coil[i].ACInterlockRelayFailedtoClose = TRUE OR Trips_DB.Coil[i].ACInterlockRelayFailedtoOpen = TRUE
		THEN
			Trips_DB.AnyACInterlockFail := TRUE;
	END_IF;
	
	IF Trips_DB.Coil[i].HVisoRelayFailedToClose = TRUE OR Trips_DB.Coil[i].HVisoRelayFailedToOpen = TRUE THEN
		Trips_DB.AnyHVisoRelayFailed := TRUE;
	END_IF
END_FOR;	

//UC warnings and alarms
FOR i := 1 TO 10 BY 1 DO
	FOR j:= 1 TO 10 BY 1 DO 
		//over voltage
		IF Devices.Coil[i].UltraCap[j].Elec_OverVoltage = 1 THEN 
			Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_warning := TRUE;
		ELSIF Devices.Coil[i].UltraCap[j].Elec_OverVoltage = 2 THEN
			Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_alarm := TRUE;
		ELSIF Devices.Coil[i].UltraCap[1].Elec_OverVoltage = 0 THEN
			Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_warning := FALSE;
			Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_alarm := FALSE;
		END_IF
		
		//high temp
		IF Devices.Coil[i].UltraCap[j].Therm_HighTemp = 1 THEN 
			Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_warning := TRUE;
		ELSIF Devices.Coil[i].UltraCap[j].Therm_HighTemp = 2 THEN
			Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_alarm := TRUE;
		ELSIF Devices.Coil[i].UltraCap[j].Therm_HighTemp = 0 THEN 
			Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_warning := FALSE;
			Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_alarm := FALSE;
		END_IF;	
		
		//any cap overtemp warning
		IF Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_warning = TRUE THEN
			Trips_DB.Coil[i].AnyCapOverTemp_warning := TRUE;
			ELSE
				Trips_DB.Coil[i].AnyCapOverTemp_warning := FALSE;
		END_IF;
		//any cap overtemp alarm
		IF Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_alarm = TRUE THEN
			Trips_DB.Coil[i].AnyCapOverTemp_alarm := TRUE;
			ELSE
				Trips_DB.Coil[i].AnyCapOverTemp_alarm := FALSE;
		END_IF;
		
		//any cap over voltage warning
		IF Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_warning = TRUE THEN
			Trips_DB.Coil[i].AnyCapOverV_warning := TRUE;
			ELSE 
				Trips_DB.Coil[i].AnyCapOverV_warning := FALSE;
		END_IF
		
		//any cap over voltage alarm
		IF Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_alarm = TRUE THEN
			Trips_DB.Coil[i].AnyCapOverV_alarm := TRUE;
			ELSE 
				Trips_DB.Coil[i].AnyCapOverV_alarm := FALSE;
		END_IF
		
		//any coil cap warning
		IF Trips_DB.Coil[i].AnyCapOverV_warning = TRUE OR Trips_DB.Coil[i].AnyCapOverTemp_warning = TRUE THEN
			Devices.Coil[i].CapWarning := TRUE;  //used for charge pause permissives
			ELSE
				Devices.Coil[i].CapWarning := FALSE;
		END_IF;
		
		//any coil cap alarm
		IF Trips_DB.Coil[i].AnyCapOverV_alarm = TRUE OR Trips_DB.Coil[i].AnyCapOverTemp_alarm = TRUE THEN
			Devices.Coil[i].CapAlarm := TRUE;  //ussed for charge pause permissives
			ELSE
				Devices.Coil[i].CapAlarm := FALSE;
		END_IF
		
	END_FOR
END_FOR


//*******************E-Stop Trips
FOR i := 1 TO 10 DO 
	IF Devices.Coil[i].Local_StopPB_Pressed = TRUE OR MCP_IO.MasterStopPB_Pressed = TRUE THEN
		Trips_DB.AnyEstopPressed := TRUE;
	END_IF;	
END_FOR;

FOR i := 1 TO 10 BY 1 DO
	IF (Trips_DB.Coil[i].ACInterlockRelayFailedtoClose = TRUE OR 
		Trips_DB.Coil[i].ACInterlockRelayFailedtoOpen = TRUE OR 
		Trips_DB.Coil[i].HVisoRelayFailedToClose = TRUE OR 
		Trips_DB.Coil[i].HVisoRelayFailedToOpen = TRUE OR
		Trips_DB.Coil[i].ChargeRelay_FailtoClose = TRUE OR
		Trips_DB.Coil[i].ChargeRelay_FailtoOpen = TRUE OR
		Trips_DB.Coil[i].DumpRelay1_FailtoClose =  TRUE OR 
		Trips_DB.Coil[i].DumpRelay1_FailtoOpen = TRUE OR 
		Trips_DB.Coil[i].DumpRelay2_FailtoClose =  TRUE OR 
		Trips_DB.Coil[i].DumpRelay2_FailtoOpen = TRUE OR 
		Trips_DB.Coil[i].ChargerVoltageReadingFaulted = TRUE OR
		Trips_DB.Coil[i].CurrentReadingFaulted = TRUE OR
		Devices.Coil[i].Local_StopPB_Pressed = TRUE OR
		Devices.Coil[i].LossPneumaticPressure = FALSE) AND Devices.Coil[i].CoilEnabled = TRUE 	
		THEN
			Devices.Coil[i].SystemFaulted := TRUE;
	END_IF
	
	IF Devices.Coil[i].SystemFaulted = TRUE THEN
		Trips_DB.SystemTripped := TRUE;
	END_IF;
END_FOR;

//timer runout


//*********************************** Test
(*IF InstrumentReading.R2_01_CH01 <= 0.0 THEN
	delay2s(input := FALSE);
ELSE 
	delay2s (input := TRUE);
END_IF;
bTest := delay2s.output;
*)
// Instrumentation Hardware trip
//Input.R2_01_00_Status.0;

//************** Clear System Fault
IF GVL.ClearAllFaults = TRUE OR stControl.ClearAllFault = TRUE THEN
	Trips_DB.InstrumentationFaulted := FALSE;
	Trips_DB.SystemTripped := FALSE;
	Trips_DB.AnyEstopPressed := FALSE;
	Trips_DB.AnyDumpRlyFail := FALSE;
	Trips_DB.AnyChargeRlyFail := FALSE;
	Trips_DB.AnyACInterlockFail := FALSE;
	
	Trips_DB.AnyDCPSU_fail := FALSE;
	Trips_DB.AnyHVisoRelayFailed := FALSE;
	Trips_DB.MachineTimedOut := FALSE;
	
	//reset relay trips
	FOR i := 1 TO 10 BY 1 DO 
		Trips_DB.Coil[i].ACInterlockRelayFailedtoClose := FALSE;
		Trips_DB.Coil[i].ACInterlockRelayFailedtoOpen := FALSE;
		Trips_DB.Coil[i].DumpRelay1_FailtoClose := FALSE;
		Trips_DB.Coil[i].DumpRelay1_FailtoOpen := FALSE;
		Trips_DB.Coil[i].DumpRelay2_FailtoClose := FALSE;
		Trips_DB.Coil[i].DumpRelay2_FailtoOpen := FALSE;
		Trips_DB.Coil[i].ChargeRelay_FailtoClose := FALSE;
		Trips_DB.Coil[i].ChargeRelay_FailtoOpen := FALSE;
		Devices.Coil[i].SystemFaulted := FALSE; 
		
		Trips_DB.Coil[i].HVisoRelayFailedToOpen := FALSE;
		Trips_DB.Coil[i].HVisoRelayFailedToClose := FALSE;
		
		FOR j := 1 TO 10 BY 1 DO
			Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_alarm := FALSE;
			Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_alarm := FALSE;
			Trips_DB.Coil[i].UltraCap[j].UC_Cell_OverV_warning := FALSE;
			Trips_DB.Coil[i].UltraCap[j].UC_tempHigh_warning := FALSE;
		END_FOR;
	END_FOR;
	
	evtLogger.ClearAllAlarms(0, FALSE);
	//evtLogger.ClearLoggedEvents(1);
END_IF;


IF i > 10 THEN 
	i := 1;
END_IF;

IF j > 10 THEN //will be 15 at full scale
	j := 1;
END_IF;]]></ST>
    </Implementation>
    <LineIds Name="Trips">
      <LineId Id="17" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="293" Count="1" />
      <LineId Id="325" Count="0" />
      <LineId Id="295" Count="1" />
      <LineId Id="327" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="300" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="238" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="302" Count="1" />
      <LineId Id="319" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="413" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="380" Count="1" />
      <LineId Id="408" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="445" Count="1" />
      <LineId Id="474" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="554" Count="2" />
      <LineId Id="447" Count="0" />
      <LineId Id="904" Count="0" />
      <LineId Id="906" Count="2" />
      <LineId Id="911" Count="1" />
      <LineId Id="909" Count="0" />
      <LineId Id="914" Count="2" />
      <LineId Id="905" Count="0" />
      <LineId Id="917" Count="5" />
      <LineId Id="520" Count="0" />
      <LineId Id="924" Count="2" />
      <LineId Id="928" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="586" Count="0" />
      <LineId Id="588" Count="1" />
      <LineId Id="484" Count="5" />
      <LineId Id="492" Count="0" />
      <LineId Id="882" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="496" Count="1" />
      <LineId Id="499" Count="6" />
      <LineId Id="883" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="530" Count="2" />
      <LineId Id="547" Count="1" />
      <LineId Id="884" Count="0" />
      <LineId Id="523" Count="2" />
      <LineId Id="563" Count="0" />
      <LineId Id="590" Count="2" />
      <LineId Id="564" Count="6" />
      <LineId Id="881" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="571" Count="6" />
      <LineId Id="885" Count="0" />
      <LineId Id="557" Count="1" />
      <LineId Id="593" Count="0" />
      <LineId Id="596" Count="2" />
      <LineId Id="594" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="605" Count="1" />
      <LineId Id="608" Count="1" />
      <LineId Id="595" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="672" Count="0" />
      <LineId Id="929" Count="1" />
      <LineId Id="409" Count="0" />
      <LineId Id="743" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="761" Count="1" />
      <LineId Id="777" Count="0" />
      <LineId Id="766" Count="2" />
      <LineId Id="770" Count="1" />
      <LineId Id="773" Count="1" />
      <LineId Id="764" Count="0" />
      <LineId Id="775" Count="1" />
      <LineId Id="778" Count="0" />
      <LineId Id="781" Count="0" />
      <LineId Id="783" Count="0" />
      <LineId Id="785" Count="1" />
      <LineId Id="789" Count="0" />
      <LineId Id="791" Count="0" />
      <LineId Id="782" Count="0" />
      <LineId Id="798" Count="0" />
      <LineId Id="804" Count="4" />
      <LineId Id="799" Count="0" />
      <LineId Id="813" Count="4" />
      <LineId Id="800" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="818" Count="0" />
      <LineId Id="822" Count="1" />
      <LineId Id="821" Count="0" />
      <LineId Id="825" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="826" Count="3" />
      <LineId Id="802" Count="1" />
      <LineId Id="838" Count="0" />
      <LineId Id="831" Count="1" />
      <LineId Id="835" Count="1" />
      <LineId Id="833" Count="0" />
      <LineId Id="839" Count="3" />
      <LineId Id="844" Count="1" />
      <LineId Id="843" Count="0" />
      <LineId Id="834" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="763" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="796" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="356" Count="1" />
      <LineId Id="432" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="931" Count="1" />
      <LineId Id="632" Count="6" />
      <LineId Id="640" Count="2" />
      <LineId Id="645" Count="0" />
      <LineId Id="644" Count="0" />
      <LineId Id="629" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="652" Count="1" />
      <LineId Id="651" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="265" Count="1" />
      <LineId Id="272" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="610" Count="1" />
      <LineId Id="676" Count="0" />
      <LineId Id="678" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="679" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="465" Count="1" />
      <LineId Id="578" Count="6" />
      <LineId Id="646" Count="0" />
      <LineId Id="680" Count="1" />
      <LineId Id="683" Count="0" />
      <LineId Id="753" Count="1" />
      <LineId Id="716" Count="1" />
      <LineId Id="847" Count="1" />
      <LineId Id="760" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="421" Count="1" />
      <LineId Id="360" Count="0" />
      <LineId Id="467" Count="3" />
      <LineId Id="331" Count="0" />
      <LineId Id="757" Count="2" />
      <LineId Id="756" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>