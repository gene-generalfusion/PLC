<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Sequence" Id="{b02178e8-8fb0-42cf-905a-18f03fa2724e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Sequence  //make sure the change the name to Sequence when we use it for the HMI bitmappings.
VAR
	//This sequence is for with PFC. - change the naming non Sequence when it is not used
	eState : E_State;
	
	ChargeRlyDelayON_Timer  : TON;
	ChargeRlyDelayDONE		: BOOL;
	ChargeRlyDelayON_PT		: TIME := T#250MS; //used for delay close and delay open for safe mode
	AbortPSnRlyDelay_Timer	: TON;
	AbortPSnRlyDelay_PT		: TIME := T#5MS; //defualt is 5ms
	AbortPSnRlyDelayDONE	: BOOL;
	ChargeCompleted			: BOOL;
	ChargingRunOutTMR_TON	: TON;
	ChargingRunOutTMR_ET	: TIME;
	ChargedRunOutTMR_TON	: TON;
	ChargedRunOutTMR_ET		: TIME;
	FireToSafeDelayTMR_TON	: TON;
	FireToSafeDelayTMR_PT	: TIME := T#5S;
	FireToSafeDelayTMR_ET	: TIME;
	FirePBpressed			: BOOL := FALSE;
	ShotFired				: BOOL := FALSE;
	
	ShotTrigDelayTMR_TON	: LTON;
	ShotTrigDelayTMR_PT		: LTIME := LTIME#10US;
	ShotTrigDelayTMR_ET		: LTIME;
	
	ShotTrigPulseTMR_TON	: LTON;
	ShotTrigPulseTMR_PT		: LTIME := LTIME#1S + ShotTrigDelayTMR_PT;
	ShotTrigPulseTMR_ET		: LTIME;
		
	ScopeTrigPulseTMR_TON	: LTON;
	ScopeTrigPulseTMR_PT	: LTIME := LTIME#10US;
	ScopeTrigPulseTMR_ET	: LTIME;
	
	DumpingRunOutTMR_TON 	: TON;
	DumpingRunOutTMR_PT		: TIME := T#20S;
	DumpingRunOutTMR_ET		: TIME;
	LocalDumpActive			: BOOL := FALSE;

	StartChargingBroadcast	: BOOL := FALSE;
	StartCharger			: ARRAY[1..8] OF BOOL;
	n						: INT := 8; // number of chargers skip 7, 8 is the pfc
	ChargeTimeFinished		: BOOL;
	StartCharWarningTMR_TON : TON;
	StartCharWarningTMR_PT	: TIME := T#5S;
	StartCharWarningTMR_ET	: TIME;
	ChargeDelayStart		: BOOL;
	
	DelayBetweenPFCandDisc_TON	: TON;
	DelayBetweenPFCandDisc_PT	: TIME := T#2S; //hmi adjust
	DelayBetweenPFCandDisc_ET	: TIME;
	
	DiscClosedToFireTrigDelay_TON		: TON;
	DiscClosedToFireTrigDelay_PT		: TIME	:= T#100MS;
	DiscClosedToFireTrigDelay_ET		: TIME;
	FireModules					: BOOL := FALSE;
	DiscFakeClose				: BOOL := FALSE;
	DiscFakeOpen				: BOOL := FALSE;
	i						: INT := 1;
	m						: INT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//Critical Delay Time
HMI_DB.ChargerHVOFF_rlyDelayPT := INT_TO_TIME(HMI_DB.ChargerHVOFF_rlyDelayPT_INT);
AbortPSnRlyDelay_PT := HMI_DB.ChargerHVOFF_rlyDelayPT;

//delays for the pfc and disconnect 
DelayBetweenPFCandDisc_PT := REAL_TO_TIME (HMI_DB.DelayBetweenPFCandDisc *1000);  // delay firing between pfc firing closing and shot disconnect
DiscClosedToFireTrigDelay_PT := REAL_TO_TIME (HMI_DB.DiscClosedToFireTrigDelay *1000); // delay firing modules after closing shot disconnect

//hv output delay
HMI_DB.HVONdelayPT := INT_TO_TIME (HMI_DB.HVONdelayPT_INT);
ChargeRlyDelayON_PT := HMI_DB.HVONdelayPT;

//runout timer
HMI_DB.RunOutTMR_PT := DINT_TO_TIME (HMI_DB.RunOutTMR_PT_INT*1000);
HMI_DB.RunOutTMR_elapse := (TIME_TO_DINT (HMI_DB.RunOutTMR_PT - ChargedRunOutTMR_TON.ET))/1000;
HMI_DB.ChargingRunOutTMR_elapse := TIME_TO_INT(ChargingRunOutTMR_TON.PT/1000 - ChargingRunOutTMR_TON.ET/1000);

//charge realy timer 
ChargeRlyDelayON_Timer(PT := ChargeRlyDelayON_PT);

//reset timer
IF eState <> E_State.CHARGING THEN 
	ChargingRunOutTMR_TON (IN := FALSE);
	//LCP1_IO.Segment[1].Module[1].ModuleCharged := FALSE; //for status light only

	FOR i := 1 TO 6 BY 1 DO
		ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
		ChargeTime_DB.ChargingTimeElapse_TON[i].IN := FALSE;
		ChargeRlyDelayON_Timer (IN := FALSE);
	END_FOR;
	ChargeTime_DB.pfcChargerDelay_TON (IN := FALSE, PT := ChargeTime_DB.pfcChargerDelay_PT, ET => ChargeTime_DB.pfcChargerDelay_ET);
	
	ChargeTime_DB.pfcChargingTimeElapse_TON.IN := FALSE;
END_IF

IF eState <> E_State.CHARGECOMPLETE THEN 
	//LCP1_IO.Segment[1].Module[1].ModuleCharged := FALSE; //for status light only
	ChargedRunOutTMR_TON (IN := FALSE); // only needed in charge complete
END_IF

IF HMI_DB.HMI_ManualModeSelected = TRUE AND eState = E_State.SAFE THEN
	eState := E_State.ManualMode;
END_IF

IF eState = E_State.CHARGING OR eState = E_State.CHARGECOMPLETE OR eState = E_State.ABORT THEN
	HMI_DB.HMI_ManualModeSelected := FALSE;
END_IF

//if not in manual mode turn off the switches
IF eState <> E_State.ManualMode THEN
	HMI_DB.CloseChargeRlySW := FALSE;
	HMI_DB.OpenDumpRlySW := FALSE;
	HMI_DB.TurnChrgHVonSW := FALSE;
	HMI_DB.TurnChrgInhibitOffSW := FALSE;
	HMI_DB.TurnOnShotTrigSW := FALSE;
	HMI_DB.TurnOnChargeAlarm := FALSE;
	HMI_DB.ClosePrefireDisconSW := FALSE;
	HMI_DB.ChargePrefireDisconCap := FALSE;
END_IF

IF HMI_DB.DumpPB = TRUE THEN
	eState := E_State.DUMPING;
	ELSIF HMI_DB.AbortPB = TRUE OR Trips_DB.TimerRunOutON = TRUE OR Permissives_DB.CageInterlockOK = FALSE THEN 
		eState := E_State.ABORT;
	//	ELSE
	//		eState := E_State.SAFE;
		END_IF;

CASE eState OF 
	
	//Safe OR IDLE
	E_State.SAFE:
		ChargeCompleted := FALSE;
		FirePBpressed := FALSE;
		
		FireToSafeDelayTMR_TON (IN := FALSE);
		
		ChargingRunOutTMR_TON (IN := FALSE);
		ChargedRunOutTMR_TON (IN := FALSE);
		DumpingRunOutTMR_TON (IN := FALSE);
		
		ShotTrigDelayTMR_TON (IN := FALSE, PT := ShotTrigDelayTMR_PT, ET => ShotTrigDelayTMR_ET);
		ScopeTrigPulseTMR_TON (IN := FALSE, PT := ScopeTrigPulseTMR_PT, ET => ScopeTrigPulseTMR_ET);
		ShotTrigPulseTMR_TON (IN := FALSE, PT := ShotTrigPulseTMR_PT, ET => ShotTrigPulseTMR_ET);
		
		ChargeTime_DB.LongestChargeTime_TON (IN := FALSE); //reset timer
		ChargeRlyDelayON_Timer ( IN := FALSE, PT := ChargeRlyDelayON_PT);
		ChargeTimeFinished := FALSE; //reset chargetime done bit
		LCP1_IO.Segment[1].Module[1].Fire := FALSE; //turn off all firing triggers
		
		//prefire disconn
		MCP_IO.PrefireDiscon.ChargePrefireDisconCap := FALSE;
		MCP_IO.PrefireDiscon.ClosePrefireDiscon	:= FALSE; //leave disconn open
		
		GVL.WriteStatetoPLC := E_state.SAFE; //status to pfc PP
		
		IF Permissives_DB.CageInterlockOK = TRUE AND HMI_DB.ArmTheCagePB = TRUE THEN 
			MCP_IO.EnergizeACKontactor := TRUE;
		END_IF;
		//HMI_DB.CloseChargeRlySW := FALSE;
		//HMI_DB.OpenDumpRlySW := FALSE;
		
		//TURN OFF ALL CHARGERS
		FOR i := 1 TO 6 BY 1 DO 
			MCP_IO.Charger[i].inhibit := TRUE; // inhibit = high, no output | inhibit = low, allows output
			MCP_IO.Charger[i].HV_ON := FALSE; 
			//MCP_IO.Charger[i].voltageSP := 0.001;
			StartCharger[i] := FALSE; // reset bit
			ChargeTimeFinished := FALSE;
			StartChargingBroadcast := FALSE;
			//reset charger delay timer
			ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
			ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE); 
		END_FOR;
		//pfc
		StartCharger[8] := FALSE;
		ChargeTime_DB.pfcChargerDelay_TON (IN := FALSE, PT := ChargeTime_DB.pfcChargerDelay_PT, ET => ChargeTime_DB.pfcChargerDelay_ET);
		ChargeTime_DB.pfcChargingTimeElapse_TON (IN := FALSE, PT := REAL_TO_TIME (1000*GVL.pfcChargeTime)); 

		LCP1_IO.Segment[1].Module[1].CloseChargeRly := FALSE;
		LCP1_IO.Segment[1].Module[2].CloseChargeRly := FALSE;
		LCP1_IO.Segment[1].Module[3].CloseChargeRly := FALSE;
		
		LCP1_IO.Segment[1].Module[1].OpenDumpRly := FALSE;
		LCP1_IO.Segment[1].Module[2].OpenDumpRly := FALSE;
		LCP1_IO.Segment[1].Module[3].OpenDumpRly := FALSE;
		
		//when charge pb is pressed
		DiscFakeOpen := TRUE; //remove when disconnect is installed
		IF HMI_DB.ChargePB = TRUE AND MCP_IO.EnergizeACKontactor = TRUE AND (Permissives_DB.PreFireDisconOpen = TRUE OR DiscFakeOpen = TRUE) 
			THEN
				ChargeDelayStart := TRUE;
			ELSIF HMI_DB.DumpPB = TRUE THEN
				eState := E_State.DUMPING; 
		END_IF;
		
		IF ChargeDelayStart = TRUE THEN
			// turn on warning light  - do it for all i and j
			LCP1_IO.Segment[1].Module[1].ModuleCharged := TRUE;
			StartCharWarningTMR_TON (IN := TRUE, PT := StartCharWarningTMR_PT, ET=> StartCharWarningTMR_ET);
		END_IF;
		
		IF StartCharWarningTMR_TON.Q = TRUE THEN 
			ChargeDelayStart := FALSE;
			eState := E_State.CHARGING;
		END_IF

	E_State.CHARGING:
	
		//start charging the disconnect cap
		//MCP_IO.PrefireDiscon.ChargePrefireDisconCap := TRUE; //no more capacitor - using ssv
	
		ChargeDelayStart := FALSE;
		StartCharWarningTMR_TON (IN := FALSE, PT := StartCharWarningTMR_PT, ET=> StartCharWarningTMR_ET);
		// turn on warning light  - do it for all i and j
		LCP1_IO.Segment[1].Module[1].ModuleCharged := TRUE;
		
		FirePBpressed := FALSE;
		LCP1_IO.Segment[1].Module[1].Fire := FALSE; //make sure it is off
		//start charging runout timer
		LCP1_IO.Segment[1].Module[1].CloseChargeRly := TRUE;
		LCP1_IO.Segment[1].Module[2].CloseChargeRly := TRUE;
		LCP1_IO.Segment[1].Module[3].CloseChargeRly := TRUE;
		
		LCP1_IO.Segment[1].Module[1].OpenDumpRly := TRUE;
		LCP1_IO.Segment[1].Module[2].OpenDumpRly := TRUE;
		LCP1_IO.Segment[1].Module[3].OpenDumpRly := TRUE;
		
		GVL.WriteStatetoPLC := E_state.CHARGING; //status to pfc PP
		
		IF Permissives_DB.ReadyToCharge = TRUE THEN 
			FOR i := 1 TO 6 BY 1 DO 
				//MCP_IO.Charger[i].voltageSP := (HMI_DB.TDKLoad[i].RequiredChargedV *1000);
				MCP_IO.Charger[i].voltageSP := (1000*HMI_DB.TDKLoad[i].RequiredChargedV);
			END_FOR
		END_IF;
		//start charging runout timer
		ChargingRunOutTMR_TON (IN := TRUE, PT := (ChargeTime_DB.LongestChargeTime_PT + HMI_DB.RunOutTMR_PT), ET => ChargingRunOutTMR_ET);
		
		IF Trips_DB.ChargingTimerRunout = TRUE THEN 
			StartChargingBroadcast := FALSE; // reset the broadcast bit whne all chargers
			ChargeTimeFinished := FALSE; //reset chargetime done bit
			ChargingRunOutTMR_TON (IN := FALSE);
			FOR i := 1 TO 6 BY 1 DO 
				ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE);							
			END_FOR
			
			eState := E_State.ABORT; 
		END_IF
		
		IF Permissives_DB.AllChargeRelayClosed = TRUE THEN
			//start broadcasting on charger timer
			StartChargingBroadcast := TRUE;
		END_IF;
		//start timer 
		IF StartChargingBroadcast = TRUE THEN 
			//start total charge time TIMER
			ChargeTime_DB.LongestChargeTime_TON (IN := TRUE, PT := ChargeTime_DB.LongestChargeTime_PT, ET => ChargeTime_DB.LongestChargeTime_ET);
			
			//mapping HMI Charger Voltage SP to MCP IO 
			(*FOR i := 1 TO 6 BY 1 DO
				MCP_IO.Charger[i].voltageSP :=(HMI_DB.TDKLoad[i].RequiredChargedV * 1000);
				//MCP_IO.Charger[1].voltageSP := REAL_TO_DINT (Setpoints.TDKLoad[1].RequiredChargedV);
			END_FOR;*)
			
			// delay stagger starts here
			ChargeTime_DB.ChargerDelay_TON[1] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[1], ET => ChargeTime_DB.ChargerDelay_ET[1]);
			ChargeTime_DB.ChargerDelay_TON[2] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[2], ET => ChargeTime_DB.ChargerDelay_ET[2]);
			ChargeTime_DB.ChargerDelay_TON[3] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[3], ET => ChargeTime_DB.ChargerDelay_ET[3]);
		
			ChargeTime_DB.ChargerDelay_TON[4] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[4], ET => ChargeTime_DB.ChargerDelay_ET[4]);
			ChargeTime_DB.ChargerDelay_TON[5] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[5], ET => ChargeTime_DB.ChargerDelay_ET[5]);
			ChargeTime_DB.ChargerDelay_TON[6] (IN := TRUE, PT := ChargeTime_DB.ChargerDelay_PT[6], ET => ChargeTime_DB.ChargerDelay_ET[6]);
			//pfc
			ChargeTime_DB.pfcChargerDelay_TON (IN := TRUE, PT := ChargeTime_DB.pfcChargerDelay_PT, ET => ChargeTime_DB.pfcChargerDelay_ET);
			ELSE
				//Turn inhibit High on all chargers and turn off all timer if no broadcasting
				FOR i := 1 TO 6 BY 1 DO 
					MCP_IO.Charger[i].inhibit := TRUE; 
					MCP_IO.Charger[i].HV_ON := FALSE;
					// turn off timer
					ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
				END_FOR;
				//pfc
				ChargeTime_DB.pfcChargerDelay_TON (IN := FALSE, PT := ChargeTime_DB.pfcChargerDelay_PT, ET => ChargeTime_DB.pfcChargerDelay_ET);
		END_IF;
			
		FOR i := 1 TO 6 BY 1 DO	
			//turn on HV output to load	
			IF ChargeTime_DB.ChargerDelay_TON[i].Q = TRUE THEN
				StartCharger[i] := TRUE;
			END_IF	
			
			IF StartCharger[i] = TRUE (*AND Permissives.ReadyToCharge = TRUE*) THEN
				MCP_IO.Charger[i].HV_ON := TRUE;
				MCP_IO.Charger[i].inhibit := FALSE;
				ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
				ChargeTime_DB.ChargingTimeElapse_TON[i]  (IN := TRUE, PT := REAL_TO_TIME (1000*MCP_IO.Charger[i].ChargeTime.timeToChargeLoad)); 
			END_IF;
			
			IF ChargeTime_DB.ChargingTimeElapse_TON[i].Q THEN
				StartCharger[i] := FALSE;
				ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE); 
				//ChargeTime_DB.ChargerDelay_TON[i] (IN := FALSE, PT := ChargeTime_DB.ChargerDelay_PT[i], ET => ChargeTime_DB.ChargerDelay_ET[i]);
			END_IF;
		END_FOR;
		
		//pfc
		IF ChargeTime_DB.pfcChargerDelay_TON.Q THEN 
			StartCharger[8] := TRUE;  
		END_IF;	
		
		IF StartCharger[8] = TRUE THEN 
			GVL.WriteStatetoPLC := E_State.CHARGING;  ///*************** pfc plc will decide the charging time elapse ton.
			ChargeTime_DB.pfcChargerDelay_TON (IN := FALSE, PT := ChargeTime_DB.pfcChargerDelay_PT, ET => ChargeTime_DB.pfcChargerDelay_ET);
			ChargeTime_DB.pfcChargingTimeElapse_TON (IN := TRUE, PT := REAL_TO_TIME (1000*GVL.pfcChargeTime)); 
		END_IF
		
		IF GVL.ReadStateFromPLC = E_State.CHARGECOMPLETE OR ChargeTime_DB.pfcChargingTimeElapse_TON.Q = TRUE THEN 
			StartCharger[8] := FALSE;
			ChargeTime_DB.pfcChargingTimeElapse_TON (IN := FALSE);
		END_IF
		
		IF ChargingRunOutTMR_TON.Q = TRUE THEN
			Trips_DB.ChargingTimerRunout := TRUE;
			ChargingRunOutTMR_TON (IN := FALSE);
		END_IF;
		
		IF ChargeTime_DB.LongestChargeTime_TON.Q = TRUE THEN 
			ChargeTimeFinished := TRUE;
			StartChargingBroadcast := FALSE;
		
			ChargeTime_DB.LongestChargeTime_TON (IN := FALSE); //reset timer
		END_IF
		
		IF ChargeTimeFinished = TRUE THEN 	
			FOR i := 1 TO 6 BY 1 DO 
				StartCharger[i] := FALSE;
				ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE);							
			END_FOR
			
			//pfc
			StartCharger[8] := FALSE;  
			ChargeTime_DB.pfcChargingTimeElapse_TON (IN := FALSE);
		END_IF
		
		//condition for charge complete
		IF (Permissives_DB.AllChargerEOC = TRUE AND ChargeTimeFinished = TRUE (*all voltage reached*)) OR HMI_DB.ForceToChargCompletePB = TRUE THEN 
			ChargeCompleted := TRUE;
			GVL.WriteStatetoPLC := E_State.CHARGECOMPLETE; // also force PFC to charge complete
		//ELSE
			//ChargeCompleted := FALSE;
		END_IF
		
//if cap voltage feedback >= charger setpoints && EOC && all timer runout then chargecomplete
		IF ChargeCompleted = TRUE THEN
			//MCP_IO.PrefireDiscon.ChargePrefireDisconCap := FALSE; //keep this on, otherwise it will dump
			//turn off chargers
			FOR i := 1 TO 6 BY 1 DO 
				MCP_IO.Charger[i].HV_ON := FALSE; 
				MCP_IO.Charger[i].inhibit := TRUE;
								
				StartCharger[i] := FALSE;
				ChargeTime_DB.ChargingTimeElapse_TON[i] (IN := FALSE);	
			END_FOR;
			
			ChargeRlyDelayON_Timer ( IN := TRUE, PT := ChargeRlyDelayON_PT);//start charge relay on timer
			StartCharger[8] := FALSE; //turn off pfc start charging bit
			ChargeTime_DB.pfcChargingTimeElapse_TON (IN := FALSE);
		END_IF;
	
		IF ChargeRlyDelayON_Timer.Q = TRUE THEN
			ChargeRlyDelayDONE := TRUE;
		END_IF;
		
		//if charge relay is done closing and charge complete is received from pfc
		IF ChargeRlyDelayDONE = TRUE AND GVL.ReadStateFromPLC = E_State.CHARGECOMPLETE THEN 
			FOR m := 1 TO 6 BY 1 DO //module 
				//Open all relays
				LCP1_IO.Segment[m].Module[1].CloseChargeRly := FALSE;
				LCP1_IO.Segment[m].Module[2].CloseChargeRly := FALSE;
				LCP1_IO.Segment[m].Module[3].CloseChargeRly := FALSE;
		
				LCP1_IO.Segment[m].Module[1].OpenDumpRly := TRUE;
				LCP1_IO.Segment[m].Module[2].OpenDumpRly := TRUE;
				LCP1_IO.Segment[m].Module[3].OpenDumpRly := TRUE;

			END_FOR;
			ChargeRlyDelayON_Timer ( IN := FALSE, PT := ChargeRlyDelayON_PT);
						
			StartChargingBroadcast := FALSE; //reset the broadcast bit when all chargers 
			
			eState := E_State.CHARGECOMPLETE;
		END_IF
	
	E_State.CHARGECOMPLETE:
		//close prefire protection disconn
		//MCP_IO.PrefireDiscon.ChargePrefireDisconCap := FALSE;
		//MCP_IO.PrefireDiscon.ClosePrefireDiscon := TRUE;  <- move the when pfc firing and wait 2 sec
		
		//turn on led light
		LCP1_IO.Segment[1].Module[1].ModuleCharged := TRUE;
		ChargeRlyDelayDONE := FALSE;
		ChargeCompleted := FALSE;
		StartChargingBroadcast := FALSE; // reset the broadcast bit whne all chargers 
		ChargedRunOutTMR_TON (IN := TRUE, PT := HMI_DB.RunOutTMR_PT);
		ChargeRlyDelayON_Timer ( IN := FALSE, PT := ChargeRlyDelayON_PT);
		
		GVL.Button.FirePBpressed := HMI_DB.FirePB; // send firing signal to pfc
		
		IF HMI_DB.FirePB = TRUE (*AND Permissives_DB.PrefireDisconClosed = TRUE*) THEN 
			
			ChargedRunOutTMR_TON (IN := FALSE);
			//and all other shot triggers.
			FirePBpressed := TRUE;
			
			//ELSE
				//LCP1_IO.Segment[1].Module[1].Fire := FALSE;
		END_IF
		
		IF FirePBpressed = TRUE THEN 
			//FireToSafeDelayTMR_TON (IN := TRUE, PT := FireToSafeDelayTMR_PT, ET => FireToSafeDelayTMR_ET);	
			
			//wait 2 sec
			DelayBetweenPFCandDisc_TON (IN := TRUE, PT := DelayBetweenPFCandDisc_PT, ET => DelayBetweenPFCandDisc_ET);
		END_IF
		
		IF DelayBetweenPFCandDisc_TON.Q = TRUE THEN 
			MCP_IO.PrefireDiscon.ClosePrefireDiscon := TRUE;
			DiscFakeClose := TRUE; //don't have disconn, do a fake close
			FirePBpressed := FALSE; //reset pb
		END_IF
		//close disconnect
		IF MCP_IO.PrefireDiscon.PrefireDisconClosed = TRUE OR DiscFakeClose = TRUE THEN //don't have disconnect, so use fake close
			DiscClosedToFireTrigDelay_TON (IN := TRUE, PT := DiscClosedToFireTrigDelay_PT, ET => DiscClosedToFireTrigDelay_ET); //hmi adjust
		END_IF
		//100ms timer finishes
		IF DiscClosedToFireTrigDelay_TON.Q = TRUE THEN 
			FireModules	:= TRUE;
			MCP_IO.PrefireDiscon.ClosePrefireDiscon := FALSE;
			DiscFakeClose := FALSE;
			DiscClosedToFireTrigDelay_TON (IN := FALSE);
		END_IF
		//fire the module trigg
		IF FireModules = TRUE THEN 
			LCP1_IO.Segment[1].Module[1].TriggerScope := TRUE;
	
			ShotTrigDelayTMR_TON (IN := TRUE, PT := ShotTrigDelayTMR_PT, ET => ShotTrigDelayTMR_ET);
			ScopeTrigPulseTMR_TON (IN := TRUE, PT := ScopeTrigPulseTMR_PT, ET => ScopeTrigPulseTMR_ET);
			ShotTrigPulseTMR_TON (IN := TRUE, PT := ShotTrigPulseTMR_PT, ET => ShotTrigPulseTMR_ET);
		END_IF
		
		IF ScopeTrigPulseTMR_TON.Q = TRUE THEN 
			LCP1_IO.Segment[1].Module[1].TriggerScope := FALSE;  //changed to true to keep the pulse on
			//ScopeTrigPulseTMR_TON (IN := FALSE);
		END_IF
		
		IF ShotTrigDelayTMR_TON.Q = TRUE THEN
			LCP1_IO.Segment[1].Module[1].Fire := TRUE;
			ShotFired := TRUE;
			//ShotTrigDelayTMR_TON (IN := FALSE);
		ELSIF ShotTrigPulseTMR_TON.Q = TRUE THEN  // changed to nested elsif
			LCP1_IO.Segment[1].Module[1].Fire := FALSE;
			//LCP1_IO.Segment[1].Module[1].TriggerScope := FALSE;  //need to comment out for scope trigger delay
			//ShotTrigPulseTMR_TON (IN := FALSE);
		END_IF
		
		IF ShotFired = TRUE THEN
			FireToSafeDelayTMR_TON (IN := TRUE, PT := FireToSafeDelayTMR_PT, ET => FireToSafeDelayTMR_ET);
			FirePBpressed := FALSE;
			ShotFired := FALSE;
			FireModules := FALSE;
			DiscFakeClose := FALSE;
		END_IF
		
		IF FireToSafeDelayTMR_TON.Q = TRUE THEN

			FireToSafeDelayTMR_TON (IN := FALSE);
			ScopeTrigPulseTMR_TON (IN := FALSE);
			ShotTrigDelayTMR_TON (IN := FALSE);
			ShotTrigPulseTMR_TON (IN := FALSE);
			//LCP1_IO.Segment[1].Module[1].TriggerScope := FALSE;
			eState := E_State.SAFE;
		END_IF;
		
		IF ChargedRunOutTMR_TON.Q = TRUE THEN
			Trips_DB.ChargedTimerRunout := TRUE;
			ChargeTimeFinished := FALSE; //reset chargetime done bit
			ChargedRunOutTMR_TON (IN := FALSE);
			ScopeTrigPulseTMR_TON (IN := FALSE);
			ShotTrigDelayTMR_TON (IN := FALSE);
			ShotTrigPulseTMR_TON (IN := FALSE);
			eState := E_State.ABORT;
		END_IF

	E_State.DUMPING:
	
		MCP_IO.PrefireDiscon.ChargePrefireDisconCap := FALSE;
		MCP_IO.PrefireDiscon.ClosePrefireDiscon := FALSE;
		
		ChargeDelayStart := FALSE;
		FirePBpressed := FALSE;
		ShotTrigDelayTMR_TON (IN := FALSE);
		StartCharWarningTMR_TON (IN := FALSE, PT := StartCharWarningTMR_PT, ET=> StartCharWarningTMR_ET);
		
		ShotTrigDelayTMR_TON (IN := FALSE, PT := ShotTrigDelayTMR_PT, ET => ShotTrigDelayTMR_ET);
		ScopeTrigPulseTMR_TON (IN := FALSE, PT := ScopeTrigPulseTMR_PT, ET => ScopeTrigPulseTMR_ET);
		ShotTrigPulseTMR_TON (IN := FALSE, PT := ShotTrigPulseTMR_PT, ET => ShotTrigPulseTMR_ET);
		
		GVL.WriteStatetoPLC := E_state.DUMPING; //status to pfc PP
		
		// dump all 
		FOR i := 1 TO 6 BY 1 DO 
			MCP_IO.Charger[i].voltageSP := 0.001;
			MCP_IO.Charger[i].inhibit := TRUE;
			MCP_IO.Charger[i].HV_ON := FALSE;
				
			LCP1_IO.Segment[i].Module[1].CloseChargeRly := FALSE;
			LCP1_IO.Segment[i].Module[2].CloseChargeRly := FALSE;
			LCP1_IO.Segment[i].Module[3].CloseChargeRly := FALSE;
		
			LCP1_IO.Segment[i].Module[1].OpenDumpRly := FALSE;
			LCP1_IO.Segment[i].Module[2].OpenDumpRly := FALSE;
			LCP1_IO.Segment[i].Module[3].OpenDumpRly := FALSE;
		END_FOR;
		
		DumpingRunOutTMR_TON (IN := TRUE, PT := DumpingRunOutTMR_PT);
		
		//HMI_DB.CloseChargeRlySW := FALSE;
		//HMI_DB.OpenDumpRlySW := FALSE;
		
		IF DumpingRunOutTMR_TON.Q = TRUE AND Permissives.AllCapsDischarged = TRUE THEN
			eState := E_State.SAFE;
		END_IF

	E_State.ABORT:
				
		//MCP_IO.PrefireDiscon.ChargePrefireDisconCap := FALSE;
		MCP_IO.PrefireDiscon.ClosePrefireDiscon := FALSE;
		
		ChargeDelayStart := FALSE;
		FirePBpressed := FALSE;
		StartCharWarningTMR_TON (IN := FALSE, PT := StartCharWarningTMR_PT, ET=> StartCharWarningTMR_ET);
		
		GVL.WriteStatetoPLC := E_state.ABORT; //status to pfc PP
		
		//dump all
		FOR i := 1 TO 6 BY 1 DO
			MCP_IO.Charger[i].voltageSP := 0.001;
			MCP_IO.Charger[i].inhibit := TRUE;
			MCP_IO.Charger[i].HV_ON := FALSE;
			
		END_FOR
				
		LCP1_IO.Segment[1].Module[1].CloseChargeRly := FALSE;
		LCP1_IO.Segment[1].Module[2].CloseChargeRly := FALSE;
		LCP1_IO.Segment[1].Module[3].CloseChargeRly := FALSE;
		
		LCP1_IO.Segment[1].Module[1].OpenDumpRly := FALSE;
		LCP1_IO.Segment[1].Module[2].OpenDumpRly := FALSE;
		LCP1_IO.Segment[1].Module[3].OpenDumpRly := FALSE;
		
		IF Permissives.SystemIsSafe = TRUE AND Trips_DB.TimerRunOutON = FALSE THEN
			eState := E_State.SAFE;
		END_IF
		
		HMI_DB.CloseChargeRlySW := FALSE;
		HMI_DB.OpenDumpRlySW := FALSE;
		HMI_DB.TurnChrgHVonSW := FALSE;
		HMI_DB.TurnChrgInhibitOffSW := FALSE;
		HMI_DB.TurnOnShotTrigSW := FALSE;
		HMI_DB.TurnOnChargeAlarm := FALSE;
		
		HMI_DB.ClosePrefireDisconSW := FALSE;
		HMI_DB.ChargePrefireDisconCap := FALSE;
		
	E_State.ManualMode:
		GVL.WriteStatetoPLC := E_state.ManualMode; //status to pfc PP
		
		DumpingRunOutTMR_TON (IN := FALSE);
		LCP1_IO.Segment[1].Module[1].CloseChargeRly := HMI_DB.CloseChargeRlySW;
		LCP1_IO.Segment[1].Module[1].OpenDumpRly := HMI_DB.OpenDumpRlySW;
		
		MCP_IO.Charger[1].HV_ON := HMI_DB.TurnChrgHVonSW;
		
		MCP_IO.PrefireDiscon.ClosePrefireDiscon 	:= HMI_DB.ClosePrefireDisconSW;
		MCP_IO.PrefireDiscon.ChargePrefireDisconCap := HMI_DB.ChargePrefireDisconCap;
		
		IF HMI_DB.TurnChrgInhibitOffSW = TRUE THEN 
				MCP_IO.Charger[1].inhibit := FALSE;
			ELSE
				MCP_IO.Charger[1].inhibit := TRUE;
		END_IF
		
		LCP1_IO.Segment[1].Module[1].Fire := HMI_DB.TurnOnShotTrigSW;
		LCP1_IO.Segment[1].Module[1].ModuleCharged := HMI_DB.TurnOnChargeAlarm;
			
		IF HMI_DB.HMI_ManualModeSelected = FALSE THEN
			eState := E_State.SAFE;
		END_IF
	
		//IF HMI_DB.P		MCP_IO.PrefireDiscon.ChargePrefireDisconCap := FALSE;
		//M
		
END_CASE;

IF i > 6 THEN 
	i := 1;
END_IF;	

IF m > 6 THEN 
	m := 1;
END_IF;	]]></ST>
    </Implementation>
    <LineIds Name="Sequence">
      <LineId Id="100" Count="0" />
      <LineId Id="156" Count="2" />
      <LineId Id="1819" Count="2" />
      <LineId Id="1818" Count="0" />
      <LineId Id="159" Count="10" />
      <LineId Id="101" Count="0" />
      <LineId Id="174" Count="3" />
      <LineId Id="587" Count="0" />
      <LineId Id="178" Count="6" />
      <LineId Id="1633" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="275" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="777" Count="0" />
      <LineId Id="779" Count="1" />
      <LineId Id="795" Count="0" />
      <LineId Id="794" Count="0" />
      <LineId Id="796" Count="1" />
      <LineId Id="1189" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="739" Count="0" />
      <LineId Id="1183" Count="2" />
      <LineId Id="1188" Count="0" />
      <LineId Id="1187" Count="0" />
      <LineId Id="805" Count="0" />
      <LineId Id="1532" Count="1" />
      <LineId Id="806" Count="0" />
      <LineId Id="103" Count="2" />
      <LineId Id="113" Count="4" />
      <LineId Id="11" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="645" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="1331" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="1330" Count="0" />
      <LineId Id="1323" Count="3" />
      <LineId Id="1338" Count="1" />
      <LineId Id="1337" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="1260" Count="0" />
      <LineId Id="648" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1507" Count="0" />
      <LineId Id="1455" Count="0" />
      <LineId Id="1508" Count="0" />
      <LineId Id="1585" Count="1" />
      <LineId Id="791" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="792" Count="0" />
      <LineId Id="946" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="522" Count="10" />
      <LineId Id="464" Count="0" />
      <LineId Id="1627" Count="0" />
      <LineId Id="1631" Count="0" />
      <LineId Id="1628" Count="0" />
      <LineId Id="1809" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="1817" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="1816" Count="0" />
      <LineId Id="1108" Count="0" />
      <LineId Id="1113" Count="1" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1109" Count="0" />
      <LineId Id="1111" Count="0" />
      <LineId Id="1102" Count="1" />
      <LineId Id="1097" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="1098" Count="1" />
      <LineId Id="1115" Count="0" />
      <LineId Id="1100" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="1445" Count="3" />
      <LineId Id="1116" Count="0" />
      <LineId Id="1104" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="1341" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="1587" Count="1" />
      <LineId Id="992" Count="0" />
      <LineId Id="997" Count="0" />
      <LineId Id="994" Count="2" />
      <LineId Id="993" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="317" Count="1" />
      <LineId Id="491" Count="9" />
      <LineId Id="486" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="329" Count="1" />
      <LineId Id="332" Count="3" />
      <LineId Id="328" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="338" Count="3" />
      <LineId Id="337" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="342" Count="1" />
      <LineId Id="345" Count="1" />
      <LineId Id="348" Count="2" />
      <LineId Id="320" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="1603" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="358" Count="2" />
      <LineId Id="479" Count="0" />
      <LineId Id="361" Count="2" />
      <LineId Id="1605" Count="0" />
      <LineId Id="1604" Count="0" />
      <LineId Id="353" Count="2" />
      <LineId Id="368" Count="2" />
      <LineId Id="356" Count="0" />
      <LineId Id="1744" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="379" Count="1" />
      <LineId Id="472" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="385" Count="2" />
      <LineId Id="516" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="1748" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="1607" Count="0" />
      <LineId Id="1609" Count="0" />
      <LineId Id="1608" Count="0" />
      <LineId Id="1614" Count="0" />
      <LineId Id="1611" Count="1" />
      <LineId Id="1619" Count="1" />
      <LineId Id="1613" Count="0" />
      <LineId Id="1743" Count="0" />
      <LineId Id="1621" Count="1" />
      <LineId Id="1753" Count="0" />
      <LineId Id="1623" Count="0" />
      <LineId Id="1610" Count="0" />
      <LineId Id="538" Count="2" />
      <LineId Id="371" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="561" Count="1" />
      <LineId Id="568" Count="1" />
      <LineId Id="563" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="555" Count="3" />
      <LineId Id="1629" Count="0" />
      <LineId Id="1624" Count="2" />
      <LineId Id="413" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="414" Count="2" />
      <LineId Id="1742" Count="0" />
      <LineId Id="417" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="420" Count="1" />
      <LineId Id="1449" Count="0" />
      <LineId Id="1813" Count="0" />
      <LineId Id="422" Count="2" />
      <LineId Id="1255" Count="1" />
      <LineId Id="1254" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="1755" Count="0" />
      <LineId Id="1246" Count="0" />
      <LineId Id="1688" Count="0" />
      <LineId Id="1754" Count="0" />
      <LineId Id="1245" Count="0" />
      <LineId Id="1247" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="1249" Count="1" />
      <LineId Id="1741" Count="0" />
      <LineId Id="1251" Count="1" />
      <LineId Id="1248" Count="0" />
      <LineId Id="1253" Count="0" />
      <LineId Id="697" Count="5" />
      <LineId Id="695" Count="0" />
      <LineId Id="426" Count="4" />
      <LineId Id="432" Count="1" />
      <LineId Id="316" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="644" Count="0" />
      <LineId Id="1512" Count="0" />
      <LineId Id="1509" Count="2" />
      <LineId Id="586" Count="0" />
      <LineId Id="692" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="1756" Count="0" />
      <LineId Id="1259" Count="0" />
      <LineId Id="1757" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="1764" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="1597" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="1758" Count="0" />
      <LineId Id="637" Count="1" />
      <LineId Id="855" Count="0" />
      <LineId Id="1767" Count="0" />
      <LineId Id="885" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="1768" Count="2" />
      <LineId Id="1799" Count="0" />
      <LineId Id="1807" Count="0" />
      <LineId Id="1771" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="1772" Count="2" />
      <LineId Id="1778" Count="1" />
      <LineId Id="1787" Count="0" />
      <LineId Id="1782" Count="0" />
      <LineId Id="1800" Count="0" />
      <LineId Id="1780" Count="1" />
      <LineId Id="1783" Count="0" />
      <LineId Id="1786" Count="0" />
      <LineId Id="1791" Count="3" />
      <LineId Id="1789" Count="1" />
      <LineId Id="1784" Count="0" />
      <LineId Id="867" Count="1" />
      <LineId Id="873" Count="0" />
      <LineId Id="869" Count="0" />
      <LineId Id="845" Count="1" />
      <LineId Id="856" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="872" Count="0" />
      <LineId Id="882" Count="1" />
      <LineId Id="1393" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="884" Count="0" />
      <LineId Id="889" Count="2" />
      <LineId Id="1803" Count="2" />
      <LineId Id="1795" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="626" Count="1" />
      <LineId Id="1802" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="851" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="852" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="736" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="737" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="573" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="1515" Count="0" />
      <LineId Id="1452" Count="0" />
      <LineId Id="1513" Count="1" />
      <LineId Id="1117" Count="0" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1319" Count="0" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1333" Count="0" />
      <LineId Id="1335" Count="0" />
      <LineId Id="1334" Count="0" />
      <LineId Id="1332" Count="0" />
      <LineId Id="1591" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="200" Count="1" />
      <LineId Id="198" Count="0" />
      <LineId Id="192" Count="5" />
      <LineId Id="191" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="801" Count="0" />
      <LineId Id="803" Count="0" />
      <LineId Id="802" Count="0" />
      <LineId Id="591" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="1453" Count="0" />
      <LineId Id="1517" Count="0" />
      <LineId Id="1516" Count="0" />
      <LineId Id="1118" Count="0" />
      <LineId Id="1518" Count="0" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1594" Count="1" />
      <LineId Id="1336" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="505" Count="2" />
      <LineId Id="503" Count="1" />
      <LineId Id="208" Count="6" />
      <LineId Id="204" Count="0" />
      <LineId Id="215" Count="1" />
      <LineId Id="245" Count="1" />
      <LineId Id="787" Count="1" />
      <LineId Id="790" Count="0" />
      <LineId Id="789" Count="0" />
      <LineId Id="772" Count="0" />
      <LineId Id="1180" Count="1" />
      <LineId Id="1531" Count="0" />
      <LineId Id="1529" Count="1" />
      <LineId Id="1182" Count="0" />
      <LineId Id="773" Count="1" />
      <LineId Id="1596" Count="0" />
      <LineId Id="808" Count="0" />
      <LineId Id="775" Count="1" />
      <LineId Id="1168" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="1528" Count="0" />
      <LineId Id="1526" Count="1" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1172" Count="1" />
      <LineId Id="1175" Count="1" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1177" Count="2" />
      <LineId Id="1171" Count="0" />
      <LineId Id="781" Count="2" />
      <LineId Id="1524" Count="0" />
      <LineId Id="1520" Count="1" />
      <LineId Id="786" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="1" />
      <LineId Id="1263" Count="2" />
      <LineId Id="1262" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>