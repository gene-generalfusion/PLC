<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="AnalogConversion" Id="{8ae23b5e-db41-4801-a4ef-8d4e513d812d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM AnalogConversion
VAR
	i					: INT := 1; //charger 1-6
	j					: INT := 1;  // section 1 - 4 
	k					: INT := 1;  // cap 1-10
	m					: INT := 1; //form cap 1-12
	eChargerType 		: E_ChargerType;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//MCP Charger 
//Analog Input
FOR i := 1 TO 6 BY 1 DO 
	//MCP_IO.Charger[i].voltageSP := (HMI_DB.TDKLoad[i].RequiredChargedV *1000);
	MCP_IO.Charger[i].voltageSP := (1000*Setpoints.TDKLoad[i].RequiredChargedV);
END_FOR
(*
//charger 1 is 30kV *************************************************************************************
																					
//*************************************************************************************
*)
//AI
FOR i := 1 TO 6 BY 1 DO
	//voltage
	MCP_IO.Charger[i].voltageFeedback_norm := Norm_x (raw_input := INT_TO_REAL (MCP_IO.Charger[i].voltageFeedback_raw),
														x_max := 32767,
														x_min := 0);
	//current																									
	MCP_IO.Charger[i].currentFeedback_norm := Norm_x (raw_input := INT_TO_REAL (MCP_IO.Charger[i].currentFeedback_raw),
														x_max := 32767,
														x_min := 0);
	//50kV chargers feedback
	//if 50kV config selected
	IF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK50kV THEN 
		//50kv
		MCP_IO.Charger[i].voltageFeedback := (EngVal.Max_50kVChargerVoltage - EngVal.Min_50kVChargerVoltage) * ADC_10V(
																							normal_input := MCP_IO.Charger[i].voltageFeedback_norm,
																							x_max := 10,
																							x_min := 0);

		MCP_IO.Charger[i].currentFeedback := (EngVal.Max_50kVChargerCurrent - EngVal.Min_50kVChargerCurrent) * ADC_10V(
																							normal_input := MCP_IO.Charger[i].currentFeedback_norm,
																							x_max := 10,
																							x_min := 0);
		//12kv
	ELSIF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK12kV THEN
		MCP_IO.Charger[i].voltageFeedback := (EngVal.Max_12kVChargerVoltage - EngVal.Min_12kVChargerVoltage) * ADC_10V(
																							normal_input := MCP_IO.Charger[i].voltageFeedback_norm,
																							x_max := 10,
																							x_min := 0);
		MCP_IO.Charger[i].currentFeedback := (EngVal.Max_12kVChargerCurrent - EngVal.Min_12kVChargerCurrent) * ADC_10V(
																							normal_input := MCP_IO.Charger[i].currentFeedback_norm,
																							x_max := 10,
																							x_min := 0);	
	ELSIF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK30kV THEN
		MCP_IO.Charger[i].voltageFeedback := (EngVal.Max_30kVChargerVoltage - EngVal.Min_30kVChargerVoltage) * ADC_10V(
																							normal_input := MCP_IO.Charger[i].voltageFeedback_norm,
																							x_max := 10,
																							x_min := 0);														
		// 30kV charger max current output is 0.6A													
		MCP_IO.Charger[i].currentFeedback := (EngVal.Max_30kVChargerCurrent - EngVal.Min_30kVChargerCurrent) * ADC_10V(
																							normal_input := MCP_IO.Charger[i].currentFeedback_norm,
																							x_max := 10,
																							x_min := 0);							
	END_IF;	
END_FOR;

//Analog Output
//voltageSP = Required Charge Voltage**

(*
//prepare output signal for 30kV chargers.  //**Setpoints.RequiredChargedV -> MCP_IO.Charger.voltageSP **
MCP_IO.Charger[1].voltageSP_norm := Norm_x (raw_input := (MCP_IO.Charger[1].voltageSP), 
												x_max := (HMI_DB.TDKLoad[1].PSratedV * 1000),
												x_min := 0);
		
MCP_IO.Charger[1].voltageSP_raw := AQ (norm_input := MCP_IO.Charger[1].voltageSP_norm, 
												x_max := 10,
												x_min := 0); 


//prepare output signal for 30kV chargers.  //**Setpoints.RequiredChargedV -> MCP_IO.Charger.voltageSP **
MCP_IO.Charger[1].voltageSP_norm := Norm_x (raw_input := (MCP_IO.Charger[1].voltageSP), 
												x_max := HMI_DB.TDKLoad[1].PSratedV,
												x_min := 0);
		
MCP_IO.Charger[1].voltageSP_raw := AQ (norm_input := MCP_IO.Charger[1].voltageSP_norm, 
												x_max := 10,
												x_min := 0); 

//Charger 1 is 30kV *************************************
IF MCP_IO.Charger[1].voltageSP >= (12000) THEN
			MCP_IO.Charger[1].voltageSP := 10000; //limit at 35kV
		ELSIF MCP_IO.Charger[1].voltageSP <= 0 THEN
			MCP_IO.Charger[1].voltageSP := 0; //limit at 0V
		END_IF; 

												
//limite for output sigal (<= 10V)  this should not happen
//IF MCP_IO.Charger[1].voltageSP_raw >= 32767 THEN 
//	MCP_IO.Charger[1].voltageSP_raw := 32767; 										
//END_IF;
//*******************************************************
*)	
//FOR i := 1 TO 8 BY 1 DO
FOR i := 1 TO 6 BY 1 DO	
	
	//if 50kV config selected
	IF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK50kV THEN 
		//set limits of charger voltage input 
		IF MCP_IO.Charger[i].voltageSP >= (EngVal.UpperLimit50kVCaps) THEN
			MCP_IO.Charger[i].voltageSP := 35000; //limit at 35kV
		ELSIF MCP_IO.Charger[i].voltageSP <= 0 THEN
			MCP_IO.Charger[i].voltageSP := 0; //limit at 0V
		END_IF; 
		
		//prepare output signal for 50kV chargers.
		MCP_IO.Charger[i].voltageSP_norm := Norm_x (raw_input :=(MCP_IO.Charger[i].voltageSP), 
												x_max := EngVal.Max_50kVChargerVoltage,
												x_min := EngVal.Min_50kVChargerVoltage);	
												
		MCP_IO.Charger[i].voltageSP_raw := AQ (norm_input := MCP_IO.Charger[i].voltageSP_norm, 
												x_max := 10,
												x_min := 0);
												
	ELSIF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK12kV THEN 
		//set limits of charger voltage input 
		IF MCP_IO.Charger[i].voltageSP >= (EngVal.UpperLimit12kVCaps) THEN
			MCP_IO.Charger[i].voltageSP := 10500; //limit at 35kV
		ELSIF MCP_IO.Charger[i].voltageSP <= 0 THEN
			MCP_IO.Charger[i].voltageSP := ABS(MCP_IO.Charger[i].voltageSP); //limit at 0V
		END_IF; 
		
		//prepare output signal for 50kV chargers.
		MCP_IO.Charger[i].voltageSP_norm := Norm_x (raw_input :=(MCP_IO.Charger[i].voltageSP), 
												x_max := EngVal.Max_12kVChargerVoltage,
												x_min := EngVal.Min_12kVChargerVoltage);	
												
		MCP_IO.Charger[i].voltageSP_raw := AQ (norm_input := MCP_IO.Charger[i].voltageSP_norm, 
												x_max := 10,
												x_min := 0);
	
	ELSIF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK30kV THEN 		
		//set limits of charger voltage input 
		IF MCP_IO.Charger[i].voltageSP >= (EngVal.UpperLimit12kVCaps) THEN
			MCP_IO.Charger[i].voltageSP := 10500; //limit at 35kV
		ELSIF MCP_IO.Charger[i].voltageSP <= 0 THEN
			MCP_IO.Charger[i].voltageSP := ABS(MCP_IO.Charger[i].voltageSP); //limit at 0V
		END_IF;
		//prepare output signal for 30kV chargers.
		MCP_IO.Charger[i].voltageSP_norm := Norm_x (raw_input :=(MCP_IO.Charger[i].voltageSP), 
												x_max := EngVal.Max_30kVChargerVoltage,
												x_min := EngVal.Min_30kVChargerVoltage);	
												
		MCP_IO.Charger[i].voltageSP_raw := AQ (norm_input := MCP_IO.Charger[i].voltageSP_norm, 
												x_max := 10,
												x_min := 0);
	END_IF;	
												
	//limite for output sigal (<= 10V)  this should not happen
	IF MCP_IO.Charger[i].voltageSP_raw >= 32767 THEN 
		MCP_IO.Charger[i].voltageSP_raw := 32767; 										
	END_IF;
	
END_FOR;

//Cap voltage feedback
//IF Input.B170357_CapRaw[0] <> 0 THEN
															//can also add a range of x samples for self calibrating
	VoltMonitor_DB.VoltageReading_norm[0] := Norm_x (raw_input := INT_TO_REAL (VoltMonitor_DB.VoltageReading_raw[0]),
														x_max := 904, //10bit value - 1110001000 = 904deci
														x_min := 100); //100deci is the zero of range -1.61 to 12.01
	LCP1_IO.Segment[1].Module[1].VoltageFeedback := (12010 - 0) * ADC_10V(normal_input := VoltMonitor_DB.VoltageReading_norm[0],
																		x_max := 12.01,
																		x_min := 0); //use zero, it will cal for the -ve	

IF VoltMonitor.DataNull = TRUE THEN
	LCP1_IO.Segment[1].Module[1].VoltageFeedback := NULL;
END_IF


//reset counter
//IF i > 8 THEN
IF i > 6 THEN
	i := 1;
END_IF;

IF j > 3 THEN 
	j := 1;
END_IF

IF k > 10 THEN 
	k := 1;
END_IF

IF m > 12 THEN 
	m := 1;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="AnalogConversion">
      <LineId Id="80" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="731" Count="1" />
      <LineId Id="775" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="610" Count="1" />
      <LineId Id="609" Count="0" />
      <LineId Id="613" Count="2" />
      <LineId Id="612" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="593" Count="1" />
      <LineId Id="617" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="269" Count="3" />
      <LineId Id="265" Count="0" />
      <LineId Id="618" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="900" Count="0" />
      <LineId Id="604" Count="1" />
      <LineId Id="619" Count="2" />
      <LineId Id="606" Count="0" />
      <LineId Id="883" Count="0" />
      <LineId Id="888" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="889" Count="1" />
      <LineId Id="895" Count="1" />
      <LineId Id="902" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="884" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="548" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="867" Count="6" />
      <LineId Id="865" Count="1" />
      <LineId Id="874" Count="0" />
      <LineId Id="851" Count="6" />
      <LineId Id="760" Count="1" />
      <LineId Id="875" Count="6" />
      <LineId Id="762" Count="3" />
      <LineId Id="746" Count="0" />
      <LineId Id="745" Count="0" />
      <LineId Id="742" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="661" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="903" Count="4" />
      <LineId Id="566" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="924" Count="6" />
      <LineId Id="923" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="908" Count="0" />
      <LineId Id="912" Count="4" />
      <LineId Id="911" Count="0" />
      <LineId Id="964" Count="0" />
      <LineId Id="971" Count="0" />
      <LineId Id="965" Count="5" />
      <LineId Id="963" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="982" Count="4" />
      <LineId Id="952" Count="0" />
      <LineId Id="981" Count="0" />
      <LineId Id="946" Count="5" />
      <LineId Id="955" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="721" Count="0" />
      <LineId Id="718" Count="2" />
      <LineId Id="722" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="717" Count="0" />
      <LineId Id="1011" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="1007" Count="1" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="153" Count="1" />
      <LineId Id="400" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="401" Count="1" />
      <LineId Id="404" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="405" Count="1" />
      <LineId Id="475" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="476" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>