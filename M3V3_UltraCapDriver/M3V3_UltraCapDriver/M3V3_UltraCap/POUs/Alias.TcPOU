<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Alias" Id="{ebc75665-f0df-4b03-b4d1-48515468f179}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Alias
VAR
	i : INT := 1; //mag driver index
	n : INT := 6; //mag driver num
	j : INT := 1; //1-2
	m : INT := 2; //# of ultra cap per driver rack
	k : INT := 1; //ultra cap number 

	
	p : INT := 12; //# of ultra caps = 12
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//R1 : MCP**  
	//INPUT
	//AI - EL3068
	MCP_IO.MagDriver[1].ShotCurrentFeedback_raw	:= Input.R1_01_00; //
	MCP_IO.MagDriver[2].ShotCurrentFeedback_raw	:= Input.R1_01_01; //
	MCP_IO.MagDriver[3].ShotCurrentFeedback_raw	:= Input.R1_01_02; // 
	MCP_IO.MagDriver[4].ShotCurrentFeedback_raw	:= Input.R1_01_03; //
	MCP_IO.MagDriver[5].ShotCurrentFeedback_raw	:= Input.R1_01_04; // 
	MCP_IO.MagDriver[6].ShotCurrentFeedback_raw	:= Input.R1_01_05; //  
	//Spare										:= Input.R1_01_06; //  
	//Spare										:= Input.R1_01_07; //
	
	//DI
	MCP_IO.MagDriver[1].DumpResistorTemp_raw	:= Input.R1_02_00; //
	MCP_IO.MagDriver[2].DumpResistorTemp_raw	:= Input.R1_02_01; // 
	MCP_IO.MagDriver[3].DumpResistorTemp_raw	:= Input.R1_02_02; // 
	MCP_IO.MagDriver[4].DumpResistorTemp_raw	:= Input.R1_02_03; // 
	MCP_IO.MagDriver[5].DumpResistorTemp_raw	:= Input.R1_02_04; // 
	MCP_IO.MagDriver[6].DumpResistorTemp_raw	:= Input.R1_02_05; // 
	
	MCP_IO.MagDriver[1].SCR_ready_to_fire		:= Input.R1_03_00; // 
	MCP_IO.MagDriver[2].SCR_ready_to_fire		:= Input.R1_03_01; // 
	MCP_IO.MagDriver[3].SCR_ready_to_fire		:= Input.R1_03_02; // 
	MCP_IO.MagDriver[4].SCR_ready_to_fire		:= Input.R1_03_03; // 
	MCP_IO.MagDriver[5].SCR_ready_to_fire		:= Input.R1_03_04; // 
	MCP_IO.MagDriver[6].SCR_ready_to_fire		:= Input.R1_03_05; // 
	
	MCP_IO.MagDriver[1].ChargeRelayClose		:= Input.R1_04_00; //
	MCP_IO.MagDriver[2].ChargeRelayClose		:= Input.R1_04_01; //
	MCP_IO.MagDriver[3].ChargeRelayClose		:= Input.R1_04_02; //
	MCP_IO.MagDriver[4].ChargeRelayClose		:= Input.R1_04_03; //
	MCP_IO.MagDriver[5].ChargeRelayClose		:= Input.R1_04_04; //
	MCP_IO.MagDriver[6].ChargeRelayClose		:= Input.R1_04_05; //
	
	//DQ
	Output.R1_05_00	:= MCP_IO.MagDriver[1].CloseChargeRly;
	Output.R1_05_01	:= MCP_IO.MagDriver[2].CloseChargeRly;
	Output.R1_05_02	:= MCP_IO.MagDriver[3].CloseChargeRly;
	Output.R1_05_03	:= MCP_IO.MagDriver[4].CloseChargeRly;
	Output.R1_05_04	:= MCP_IO.MagDriver[5].CloseChargeRly;
	Output.R1_05_05	:= MCP_IO.MagDriver[6].CloseChargeRly;
	//Output.R1_05_06	:= 
	//Output.R1_05_07	:= 
	
	//DQ
	Output.R1_06_00	:= MCP_IO.MagDriver[1].OpenDumpRly;
	Output.R1_06_01	:= MCP_IO.MagDriver[2].OpenDumpRly;
	Output.R1_06_02	:= MCP_IO.MagDriver[3].OpenDumpRly;
	Output.R1_06_03	:= MCP_IO.MagDriver[4].OpenDumpRly;
	Output.R1_06_04 := MCP_IO.MagDriver[5].OpenDumpRly;
	Output.R1_06_05 := MCP_IO.MagDriver[6].OpenDumpRly;
	
	MCP_IO.MagDriver[1].DumpRelayOpen		:= NOT Input.R1_07_00; //
	MCP_IO.MagDriver[2].DumpRelayOpen		:= NOT Input.R1_07_01; //
	MCP_IO.MagDriver[3].DumpRelayOpen		:= NOT Input.R1_07_02; //
	MCP_IO.MagDriver[4].DumpRelayOpen		:= NOT Input.R1_07_03; //
	MCP_IO.MagDriver[5].DumpRelayOpen		:= NOT Input.R1_07_04; //
	MCP_IO.MagDriver[6].DumpRelayOpen		:= NOT Input.R1_07_05; //
	(*shaft ramp add below*)
	
	//DQ
	Output.R1_08_00	:= NOT MCP_IO.Charger[1].inhibit;
	Output.R1_08_01	:= NOT MCP_IO.Charger[2].inhibit;
	Output.R1_08_02	:= NOT MCP_IO.Charger[3].inhibit;
	Output.R1_08_03	:= NOT MCP_IO.Charger[4].inhibit;
	Output.R1_08_04	:= NOT MCP_IO.Charger[5].inhibit;
	Output.R1_08_05	:= NOT MCP_IO.Charger[6].inhibit;
	Output.R1_08_06 := MCP_IO.TriggerSCRs;
	Output.R1_08_07	:= MCP_IO.TurnONSystemChargedLED;
		
	//EL4008 AQ
	Output.R1_09_00	:= MCP_IO.Charger[1].voltageSP_raw;
	Output.R1_09_01	:= MCP_IO.Charger[2].voltageSP_raw;
	Output.R1_09_02	:= MCP_IO.Charger[3].voltageSP_raw;
	Output.R1_09_03	:= MCP_IO.Charger[4].voltageSP_raw;	
	Output.R1_09_04	:= MCP_IO.Charger[5].voltageSP_raw;
	Output.R1_09_05	:= MCP_IO.Charger[6].voltageSP_raw;
	
	//CANBUS 
	//Output.R1_10_CANrequest := CAN_comm. ---delete, this is 7F
	Output.R1_10_7F_CANrequest.cobId := CAN_comm.CanTx_7F_config_ID;
	Output.R1_10_7F_CANrequest.data[0] := CAN_comm.CanTx_7F_config_request[0];
	Output.R1_10_7F_CANrequest.data[1] := CAN_comm.CanTx_7F_config_request[1];
	Output.R1_10_7F_CANrequest.data[2] := CAN_comm.CanTx_7F_config_request[2];
	Output.R1_10_7F_CANrequest.data[3] := CAN_comm.CanTx_7F_config_request[3];
	Output.R1_10_7F_CANrequest.data[4] := CAN_comm.CanTx_7F_config_request[4];
	Output.R1_10_7F_CANrequest.data[5] := CAN_comm.CanTx_7F_config_request[5];
	Output.R1_10_7F_CANrequest.data[6] := CAN_comm.CanTx_7F_config_request[6];
	Output.R1_10_7F_CANrequest.data[7] := CAN_comm.CanTx_7F_config_request[7];
	
		//will eventually need to make a loop for this - code below
	Output.R1_10_ARR_CANrequest[1].cobId := MCP_IO.MagDriver[1].Cap[1].CanTx_config_ID;
	Output.R1_10_ARR_CANrequest[1].data[0] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[0];
	Output.R1_10_ARR_CANrequest[1].data[1] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[1];
	Output.R1_10_ARR_CANrequest[1].data[2] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[2];
	Output.R1_10_ARR_CANrequest[1].data[3] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[3];
	Output.R1_10_ARR_CANrequest[1].data[4] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[4];
	Output.R1_10_ARR_CANrequest[1].data[5] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[5];
	Output.R1_10_ARR_CANrequest[1].data[6] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[6];
	Output.R1_10_ARR_CANrequest[1].data[7] := MCP_IO.MagDriver[1].Cap[1].CanTx_config_request[7];

	Output.R1_10_ARR_CANrequest[2].cobId := MCP_IO.MagDriver[1].Cap[2].CanTx_config_ID;
	Output.R1_10_ARR_CANrequest[2].data[0] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[0];
	Output.R1_10_ARR_CANrequest[2].data[1] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[1];
	Output.R1_10_ARR_CANrequest[2].data[2] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[2];
	Output.R1_10_ARR_CANrequest[2].data[3] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[3];
	Output.R1_10_ARR_CANrequest[2].data[4] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[4];
	Output.R1_10_ARR_CANrequest[2].data[5] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[5];
	Output.R1_10_ARR_CANrequest[2].data[6] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[6];
	Output.R1_10_ARR_CANrequest[2].data[7] := MCP_IO.MagDriver[1].Cap[2].CanTx_config_request[7];
	
	// input
	
	//MCP_IO.MagDriver[1].Cap[1].Elec_AveVolt 		:= Input.R1_10_CapNumber[1].Status.Elec_AveVolt; //per cell <- example
	//this is replaced by the loop below
(*	MCP_IO.MagDriver[1].Cap[1].Elec_AveVolt 		:= Input.R1_10_CapNumber[1].Status.Elec_AveVolt; //per cell
	MCP_IO.MagDriver[1].Cap[1].Elec_Balancing 		:= Input.R1_10_CapNumber[1].Status.Elec_Balancing; // 0x0[Not Active], 0x1[Active], 0x2[Error], 0x3[Not Available]
	MCP_IO.MagDriver[1].Cap[1].Elec_HighestVolt 	:= Input.R1_10_CapNumber[1].Status.Elec_HighestVolt; //per cell
	MCP_IO.MagDriver[1].Cap[1].Elec_Imbalance 		:= Input.R1_10_CapNumber[1].Status.Elec_Imbalance;  // 0x0[No Warnings], 0x1[Warning Active], 0x2[Alarm Active], 0x3[Not Available]
	MCP_IO.MagDriver[1].Cap[1].Elec_OverVoltage		:= Input.R1_10_CapNumber[1].Status.Elec_OverVoltage;  // 0x0[No Warnings], 0x1[Warning Active], 0x2[Alarm Active], 0x3[NOT Available] 
	MCP_IO.MagDriver[1].Cap[1].Elec_VoltageSum		:= Input.R1_10_CapNumber[1].Status.Elec_VoltageSum; //total voltage in one UC
	MCP_IO.MagDriver[1].Cap[1].Therm_HighestCell	:= Input.R1_10_CapNumber[1].Status.Therm_HighestCell; //C
	MCP_IO.MagDriver[1].Cap[1].Therm_HighTemp		:= Input.R1_10_CapNumber[1].Status.Therm_HighTemp;  //0x0[No Warnings], 0x1[Warning Active], 0x2[Alarm Active], 0x3[NOT Available]
*)	
//need to verify the couunter
	FOR i := 1 TO n BY 1 DO 
		FOR j := 1 TO m BY 1 DO 
			IF j = 1 THEN 
				k := 2*i -j;
				ELSIF j = 2 THEN 
					k :=j*i;
			END_IF

			MCP_IO.MagDriver[i].Cap[j].Elec_AveVolt			:= Input.R1_10_CapNumber[k].Elec_AveVolt; //per cell
			MCP_IO.MagDriver[i].Cap[j].Elec_Balancing		:= Input.R1_10_CapNumber[k].Elec_Balancing; // 0x0[Not Active], 0x1[Active], 0x2[Error], 0x3[Not Available]
			MCP_IO.MagDriver[i].Cap[j].Elec_HighestVolt		:= Input.R1_10_CapNumber[k].Elec_HighestVolt; //per cell
			MCP_IO.MagDriver[i].Cap[j].Elec_Imbalance		:= Input.R1_10_CapNumber[k].Elec_Imbalance;  // 0x0[No Warnings], 0x1[Warning Active], 0x2[Alarm Active], 0x3[Not Available]
			MCP_IO.MagDriver[i].Cap[j].Elec_OverVoltage		:= Input.R1_10_CapNumber[k].Elec_OverVoltage;  // 0x0[No Warnings], 0x1[Warning Active], 0x2[Alarm Active], 0x3[NOT Available] 
			MCP_IO.MagDriver[i].Cap[j].Elec_VoltageSum		:= Input.R1_10_CapNumber[k].Elec_VoltageSum; //total voltage in one UC
			MCP_IO.MagDriver[i].Cap[j].Therm_HighestCell	:= Input.R1_10_CapNumber[k].Therm_HighestCell; //C
			MCP_IO.MagDriver[i].Cap[j].Therm_HighTemp		:= Input.R1_10_CapNumber[k].Therm_HighTemp;  //0x0[No Warnings], 0x1[Warning Active], 0x2[Alarm Active], 0x3[NOT Available]
			//uncomment to replace the code above - but only if we want to be able to edit ID on each and every single CAN ID
			(*Output.R1_10_ARR_CANrequest[i].data[0] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[0];
			Output.R1_10_ARR_CANrequest[i].data[1] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[1];
			Output.R1_10_ARR_CANrequest[i].data[2] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[2];
			Output.R1_10_ARR_CANrequest[i].data[3] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[3];
			Output.R1_10_ARR_CANrequest[i].data[4] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[4];
			Output.R1_10_ARR_CANrequest[i].data[5] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[5];
			Output.R1_10_ARR_CANrequest[i].data[6] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[6];
			Output.R1_10_ARR_CANrequest[i].data[7] := MCP_IO.MagDriver[i].Cap[k].CanTx_config_request[7];*)
			MCP_IO.MagDriver[i].Cap[j].UltraCap_Dummy.R1_10_UC_Rx_cobID := Input.R1_10_UC_status[k].R1_10_UC_Rx_cobID;
			MCP_IO.MagDriver[i].Cap[j].UltraCap_Dummy.R1_10_UC_Rx_data := Input.R1_10_UC_status[k].R1_10_UC_Rx_data;
		END_FOR		
	END_FOR
	
	//MCP_IO.MagDriver[1].Cap[1].UltraCap_Dummy.R1_10_UC_Rx_cobID := Input.R1_10_UC_7F_status.R1_10_UC_Rx_cobID;
	//MCP_IO.MagDriver[1].Cap[1].UltraCap_Dummy.R1_10_UC_Rx_data := Input.R1_10_UC_7F_status.R1_10_UC_Rx_data;	
	// need to have how many voltage monitor board or voltage transmitter board per fruit stand ????
	//LCP3_IO.VMB.VTB[1].

	//LV Alias
	//commented out to test the sequence
(*	
	HMI_DB.ChargePB 				:= LV.TxWord1.0;
	HMI_DB.DumpPB					:= LV.TxWord1.1;		
	HMI_DB.AbortPB					:= LV.TxWord1.2;
	HMI_DB.FirePB					:= LV.TxWord1.3;
	HMI_DB.ClearFaultPB 			:= LV.TxWord1.4;
	HMI_DB.AllDumpRelaysOpenBP		:= LV.TxWord1.5;
	HMI_DB.AllChargeRelayCloseBP	:= LV.TxWord1.6;
	HMI_DB.SystemSafeBP				:= LV.TxWord1.7;
	HMI_DB.CloseChargeRlySW			:= LV.TxWord1.8;
	HMI_DB.OpenDumpRlySW 			:= LV.TxWord1.9;
	HMI_DB.HMI_ManualModeSelected	:= LV.TxWord1.10;  // 1 = manual mode selected
	HMI_DB.TurnChrgInhibitOffSW		:= LV.TxWord1.11;
	HMI_DB.TurnOnShotTrigSW			:= LV.TxWord1.12;
	HMI_DB.TurnOnChargeAlarm		:= LV.TxWord1.13;
	//:= LV.TxWord1.14;
	//:= LV.TxWord1.15;
	
	MCP_IO.Charger[1].inhibit		:= LV.TxWord2.0;
	MCP_IO.Charger[2].inhibit		:= LV.TxWord2.1;
	MCP_IO.Charger[3].inhibit		:= LV.TxWord2.2;
	MCP_IO.Charger[4].inhibit		:= LV.TxWord2.3;
	
	MCP_IO.Charger[5].inhibit		:= LV.TxWord2.4;
	MCP_IO.Charger[6].inhibit		:= LV.TxWord2.5;
	
	LV.RxWord1.0 := MCP_IO.MagDriver[1].SCR_ready_to_fire;
	LV.RxWord1.1 := MCP_IO.MagDriver[2].SCR_ready_to_fire;
	LV.RxWord1.2 := MCP_IO.MagDriver[3].SCR_ready_to_fire;
	LV.RxWord1.3 := MCP_IO.MagDriver[4].SCR_ready_to_fire;
	LV.RxWord1.4 := MCP_IO.MagDriver[5].SCR_ready_to_fire;
	LV.RxWord1.5 := MCP_IO.MagDriver[6].SCR_ready_to_fire;
	LV.RxWord1.6 := Permissives_DB.AllSCRreadyToFire;
	//LV.RxWord1.7 
	//LV.RxWord1.8 
	//LV.RxWord1.9 
	//LV.RxWord1.10
	//LV.RxWord1.11 
	//LV.RxWord1.12 
	//LV.RxWord1.13 
	//LV.RxWord1.14 
	//LV.RxWord1.15 
	
	LV.RxWord2.0 := MCP_IO.MagDriver[1].ChargeRelayClose;
	LV.RxWord2.1 := MCP_IO.MagDriver[2].ChargeRelayClose;
	LV.RxWord2.2 := MCP_IO.MagDriver[3].ChargeRelayClose;
	LV.RxWord2.3 := MCP_IO.MagDriver[4].ChargeRelayClose;
	LV.RxWord2.4 := MCP_IO.MagDriver[5].ChargeRelayClose;
	LV.RxWord2.5 := MCP_IO.MagDriver[6].ChargeRelayClose;
	LV.RxWord2.6 := Permissives_DB.AllChargeRelayClosed;
	LV.RxWord2.7 := MCP_IO.MagDriver[1].DumpRelayOpen;
	LV.RxWord2.8 := MCP_IO.MagDriver[2].DumpRelayOpen;
	LV.RxWord2.9 := MCP_IO.MagDriver[3].DumpRelayOpen;
	LV.RxWord2.10 := MCP_IO.MagDriver[4].DumpRelayOpen;
	LV.RxWord2.11 := MCP_IO.MagDriver[5].DumpRelayOpen;
	LV.RxWord2.12 := MCP_IO.MagDriver[6].DumpRelayOpen;
	LV.RxWord2.13 := Permissives_DB.AllDumpRelayOpen;
	LV.RxWord3.14 := Permissives_DB.AllDumpResTempOK;
	//LV.RxWord3.15   
	
	HMI_DB.ChargerHVOFF_rlyDelayPT_INT	:= LV.TxInt[1];
	HMI_DB.HVONdelayPT_INT 				:= LV.TxInt[2];
	LV.RxInt[1]							:= HMI_DB.ChargingRunOutTMR_elapse;
	
	HMI_DB.RunOutTMR_PT_INT				:= LV.TxDint[1];
	LV.RxDint[1]						:= HMI_DB.RunOutTMR_elapse;	
	
	FOR i := 1 TO n BY 1 DO
		
		HMI_DB.HPT5[i].RequiredChargedV				:= LV.HPT5Load[i].RequiredChargedV; // manually enter voltage setpoint
		//HMI_DB.HPT5[i].TotalCapacitance	:= LV.HPT5Load[i].TotalCapacitance;	
		HMI_DB.HPT5[i].ChargeTime					:= LV.HPT5Load[i].ChargeTime;	//manually enter charge time
		LV.Charger[i].ChargeTime.timeToChargeLoad 	:= MCP_IO.Charger[i].ChargeTime.timeToChargeLoad; //send charge time back to LV
		
	END_FOR
	 
	LV.RxREAL[1] := MCP_IO.MagDriver[1].Cap[1].CapVoltage; 
	LV.RxREAL[2] := MCP_IO.MagDriver[1].Cap[2].CapVoltage;  
	LV.RxREAL[3] := MCP_IO.MagDriver[2].Cap[1].CapVoltage;  
	LV.RxREAL[4] := MCP_IO.MagDriver[2].Cap[2].CapVoltage;  
	LV.RxREAL[5] := MCP_IO.MagDriver[3].Cap[1].CapVoltage;  
	LV.RxREAL[6] := MCP_IO.MagDriver[3].Cap[2].CapVoltage;  
	LV.RxREAL[7] := MCP_IO.MagDriver[4].Cap[1].CapVoltage;  
	LV.RxREAL[8] := MCP_IO.MagDriver[4].Cap[2].CapVoltage;  
	LV.RxREAL[9] := MCP_IO.MagDriver[5].Cap[1].CapVoltage;  
	LV.RxREAL[10] := MCP_IO.MagDriver[5].Cap[2].CapVoltage;  
	LV.RxREAL[11] := MCP_IO.MagDriver[6].Cap[1].CapVoltage;  
	LV.RxREAL[12] := MCP_IO.MagDriver[6].Cap[2].CapVoltage;   
	
	LV.RxREAL[13] := MCP_IO.MagDriver[1].DumpResistorTemp; 
	LV.RxREAL[14] := MCP_IO.MagDriver[2].DumpResistorTemp; 
	LV.RxREAL[15] := MCP_IO.MagDriver[3].DumpResistorTemp; 
	LV.RxREAL[16] := MCP_IO.MagDriver[4].DumpResistorTemp; 
	LV.RxREAL[17] := MCP_IO.MagDriver[5].DumpResistorTemp; 
	LV.RxREAL[18] := MCP_IO.MagDriver[6].DumpResistorTemp; 
	
	LV.ReadState 						:= Sequence.eState;	 
	plc_plc_comm_DB.ReadStateFromPLC 	:= LV.WriteState;
	LV.database 						:= P_TextModeWrite.database;
	*)
	

IF j > m THEN 
	j := 1;
END_IF

IF i > n THEN 
	i := 1;
END_IF

IF k > p THEN 
	k := 1;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="Alias">
      <LineId Id="14" Count="1" />
      <LineId Id="485" Count="0" />
      <LineId Id="1079" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="51" Count="1" />
      <LineId Id="378" Count="1" />
      <LineId Id="410" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="1081" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="434" Count="1" />
      <LineId Id="438" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="1106" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="442" Count="1" />
      <LineId Id="458" Count="0" />
      <LineId Id="446" Count="1" />
      <LineId Id="1107" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="450" Count="1" />
      <LineId Id="983" Count="0" />
      <LineId Id="461" Count="9" />
      <LineId Id="486" Count="0" />
      <LineId Id="471" Count="3" />
      <LineId Id="753" Count="1" />
      <LineId Id="1124" Count="0" />
      <LineId Id="1118" Count="5" />
      <LineId Id="1117" Count="0" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1091" Count="5" />
      <LineId Id="1090" Count="0" />
      <LineId Id="755" Count="2" />
      <LineId Id="415" Count="0" />
      <LineId Id="496" Count="5" />
      <LineId Id="418" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1143" Count="0" />
      <LineId Id="1134" Count="7" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1158" Count="0" />
      <LineId Id="1455" Count="0" />
      <LineId Id="1426" Count="0" />
      <LineId Id="1428" Count="6" />
      <LineId Id="1427" Count="0" />
      <LineId Id="1445" Count="0" />
      <LineId Id="1447" Count="7" />
      <LineId Id="1446" Count="0" />
      <LineId Id="1444" Count="0" />
      <LineId Id="1144" Count="1" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1162" Count="0" />
      <LineId Id="1195" Count="0" />
      <LineId Id="1148" Count="6" />
      <LineId Id="1415" Count="0" />
      <LineId Id="1193" Count="0" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1188" Count="1" />
      <LineId Id="1191" Count="1" />
      <LineId Id="1190" Count="0" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1178" Count="6" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1436" Count="7" />
      <LineId Id="1306" Count="0" />
      <LineId Id="1456" Count="1" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1305" Count="0" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1142" Count="0" />
      <LineId Id="1051" Count="1" />
      <LineId Id="1049" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="867" Count="0" />
      <LineId Id="643" Count="7" />
      <LineId Id="653" Count="0" />
      <LineId Id="675" Count="0" />
      <LineId Id="767" Count="3" />
      <LineId Id="857" Count="0" />
      <LineId Id="689" Count="0" />
      <LineId Id="745" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="705" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="677" Count="0" />
      <LineId Id="676" Count="0" />
      <LineId Id="678" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="680" Count="0" />
      <LineId Id="717" Count="2" />
      <LineId Id="682" Count="0" />
      <LineId Id="722" Count="2" />
      <LineId Id="721" Count="0" />
      <LineId Id="726" Count="2" />
      <LineId Id="720" Count="0" />
      <LineId Id="733" Count="0" />
      <LineId Id="729" Count="2" />
      <LineId Id="725" Count="0" />
      <LineId Id="734" Count="2" />
      <LineId Id="732" Count="0" />
      <LineId Id="1460" Count="4" />
      <LineId Id="737" Count="0" />
      <LineId Id="985" Count="0" />
      <LineId Id="1027" Count="0" />
      <LineId Id="991" Count="0" />
      <LineId Id="640" Count="0" />
      <LineId Id="657" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="687" Count="0" />
      <LineId Id="659" Count="1" />
      <LineId Id="662" Count="0" />
      <LineId Id="667" Count="1" />
      <LineId Id="699" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="672" Count="0" />
      <LineId Id="1465" Count="0" />
      <LineId Id="669" Count="0" />
      <LineId Id="1466" Count="0" />
      <LineId Id="896" Count="0" />
      <LineId Id="1468" Count="11" />
      <LineId Id="899" Count="0" />
      <LineId Id="905" Count="1" />
      <LineId Id="909" Count="0" />
      <LineId Id="911" Count="1" />
      <LineId Id="933" Count="0" />
      <LineId Id="1480" Count="2" />
      <LineId Id="962" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="903" Count="1" />
      <LineId Id="970" Count="2" />
      <LineId Id="964" Count="0" />
      <LineId Id="1310" Count="2" />
      <LineId Id="1169" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>