<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ChargeTime" Id="{28824270-3930-44b7-bfe2-d4b07042cd6b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ChargeTime
VAR

	lca_charge_cal	 : ARRAY [1..7] OF LCA_CAL;
	i				 : INT := 1; // 1-8 instances
	j				 : INT := 1; //1 - 8 ch
	m				 : INT := 1;
	n				 : INT := 7;
	a				 : INT := 1; 
	
	Q				 : REAL := 1; // Charge
	Current			 : REAL := 0.1; //100mA
	
	longestChargeTime: REAL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//mapping hmi input to setpoints
FOR j := 1 TO n BY 1 DO	
	Setpoints.TDKLoad[j].TotalCapacitance	:= HMI_DB.TDKLoad[j].TotalCapacitance;
	Setpoints.TDKLoad[j].PSratedV 			:= HMI_DB.TDKLoad[j].PSratedV;
	Setpoints.TDKLoad[j].RequiredChargedV	:= HMI_DB.TDKLoad[j].RequiredChargedV;  
	Setpoints.TDKLoad[j].wLCA				:= HMI_DB.TDKLoad[j].wLCA;
	Setpoints.TDKLoad[j].NumOfCharger		:= HMI_DB.TDKLoad[j].NumOfCharger;	
	
	//charge time delay and elapse for HMI
	ChargeTime_DB.ChargeTimeStartDelay[j] := TIME_TO_INT((ChargeTime_DB.ChargerDelay_PT[j] - ChargeTime_DB.ChargerDelay_ET[j])/1000);
	ChargeTime_DB.ChargingTimeElapse[j] := TIME_TO_INT((ChargeTime_DB.ChargingTimeElapse_TON[j].PT - ChargeTime_DB.ChargingTimeElapse_TON[j].ET)/1000);
END_FOR

//ChargeTime_DB.PreFormChargeTimeStartDelay := TIME_TO_INT((ChargeTime_DB.PreFormChargeTime_PT - ChargeTime_DB.PreFormChargeTime_ET)/1000);
//ChargeTime_DB.PreFormChargingTimeElapse := TIME_TO_INT((ChargeTime_DB.PreFormChargingTimeElapse_TON.PT - ChargeTime_DB.PreFormChargingTimeElapse_TON.ET)/1000);

(*
//GLS 3
Setpoints.GLSLoad.TotalCapacitance	:= HMI_DB.GLSLoad.TotalCapacitance;
Setpoints.GLSLoad.PSratedV 			:= HMI_DB.GLSLoad.PSratedV;
//Setpoints.PreFormBank.RequiredChargedV	:= Recipe.PreFormBank.RequiredChargedV; //only thing that comes from the main plc recipe
//Setpoints.GLSLoad.wLCA				:= HMI_DB.GLSLoad.wLCA;
Setpoints.GLSLoad.NumOfCharger		:= HMI_DB.GLSLoad.NumOfCharger;	
*)


//veto
//this should not happen
FOR m := 1 TO n BY 1 DO
	IF Setpoints.TDKLoad[m].RequiredChargedV <= -2 THEN
		Setpoints.TDKLoad[m].RequiredChargedV := -2;
	END_IF	
END_FOR

FOR i := 1 TO n BY 1 DO
	IF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK50kV THEN 
		//set limites of charger voltage input from HMI input
		IF 1000*(Setpoints.TDKLoad[i].RequiredChargedV) >= EngVal.UpperLimit50kVCaps THEN
			Setpoints.TDKLoad[i].RequiredChargedV := (EngVal.UpperLimit50kVCaps/1000); //limit at 35kv
			HMI_DB.TDKLoad[i].RequiredChargedV := (EngVal.UpperLimit50kVCaps/1000);
		ELSIF Setpoints.TDKLoad[i].RequiredChargedV <= 0 THEN
			Setpoints.TDKLoad[i].RequiredChargedV := 0;
			HMI_DB.TDKLoad[i].RequiredChargedV := 0;
		END_IF
	ELSIF MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK12kV OR MCP_IO.Charger[i].ChargerType = E_ChargerType.TDK30kV THEN
		//set limites of charger voltage input from HMI input
		IF 1000*(Setpoints.TDKLoad[i].RequiredChargedV) >= EngVal.UpperLimit12kVCaps THEN
			Setpoints.TDKLoad[i].RequiredChargedV := (EngVal.UpperLimit12kVCaps/1000); //limit at 10kv
			HMI_DB.TDKLoad[i].RequiredChargedV := (EngVal.UpperLimit12kVCaps/1000); //limit at 10kv
		ELSIF Setpoints.TDKLoad[i].RequiredChargedV <= 0 THEN
			Setpoints.TDKLoad[i].RequiredChargedV := ABS(Setpoints.TDKLoad[i].RequiredChargedV);
			HMI_DB.TDKLoad[i].RequiredChargedV := ABS(Setpoints.TDKLoad[i].RequiredChargedV);
		END_IF
	END_IF;
END_FOR;

(*//ch 1 - 3
IF Setpoints.TDKLoad[1].RequiredChargedV >= 10 THEN
	Setpoints.TDKLoad[1].RequiredChargedV := 10;
	ELSIF Setpoints.TDKLoad[1].RequiredChargedV < 0 THEN
		Setpoints.TDKLoad[1].RequiredChargedV := ABS(Setpoints.TDKLoad[1].RequiredChargedV); 
END_IF
IF Setpoints.TDKLoad[2].RequiredChargedV >= 10 THEN
	Setpoints.TDKLoad[2].RequiredChargedV := 10;
	ELSIF Setpoints.TDKLoad[2].RequiredChargedV < 0 THEN
		Setpoints.TDKLoad[2].RequiredChargedV := ABS(Setpoints.TDKLoad[2].RequiredChargedV); 	
END_IF
IF Setpoints.TDKLoad[3].RequiredChargedV >= 10 THEN
	Setpoints.TDKLoad[3].RequiredChargedV := 10;
	ELSIF Setpoints.TDKLoad[3].RequiredChargedV < 0 THEN
		Setpoints.TDKLoad[3].RequiredChargedV := ABS(Setpoints.TDKLoad[3].RequiredChargedV); 	
END_IF

//ch 4-6
IF Setpoints.TDKLoad[4].RequiredChargedV >= 12 THEN
	Setpoints.TDKLoad[4].RequiredChargedV := 12;
	ELSIF Setpoints.TDKLoad[4].RequiredChargedV < 0 THEN
		Setpoints.TDKLoad[4].RequiredChargedV := ABS(Setpoints.TDKLoad[4].RequiredChargedV); 	
END_IF
IF Setpoints.TDKLoad[5].RequiredChargedV >= 12 THEN
	Setpoints.TDKLoad[5].RequiredChargedV := 12;
	ELSIF Setpoints.TDKLoad[5].RequiredChargedV < 0 THEN
		Setpoints.TDKLoad[5].RequiredChargedV := ABS(Setpoints.TDKLoad[5].RequiredChargedV); 	
END_IF
IF Setpoints.TDKLoad[6].RequiredChargedV >= 12 THEN
	Setpoints.TDKLoad[6].RequiredChargedV := 12;
	ELSIF Setpoints.TDKLoad[6].RequiredChargedV < 0 THEN
		Setpoints.TDKLoad[6].RequiredChargedV := ABS(Setpoints.TDKLoad[6].RequiredChargedV); 	
END_IF
*)

//chg time
FOR i := 1 TO n BY 1 DO
	lca_charge_cal[i](	PSratedV := Setpoints.TDKLoad[i].PSratedV, 
						RequiredChargeV := Setpoints.TDKLoad[i].RequiredChargedV, 
						LoadCapacitance := Setpoints.TDKLoad[i].TotalCapacitance, 
						NumOfCharger := Setpoints.TDKLoad[i].NumOfCharger, 
						wLCA := Setpoints.TDKLoad[i].wLCA
						);

	MCP_IO.Charger[i].ChargeTime.timeToChargeLoad := lca_charge_cal[i].TimeToChargeLoad;
	MCP_IO.Charger[i].ChargeTime.Power := lca_charge_cal[i].RespectedPower;
	
	IF Setpoints.TDKLoad[i].RequiredChargedV = 0 THEN
		MCP_IO.Charger[i].ChargeTime.timeToChargeLoad := 0;
		MCP_IO.Charger[i].ChargeTime.Power := 0;
	END_IF
END_FOR


(*
//gls - gls3 is preform cap charger
Q := 1000* Setpoints.GLSLoad.RequiredChargedV * (Setpoints.GLSLoad.TotalCapacitance / 1000000);
MCP_IO.GLS3_Load.timeToChargeLoad := Q / Current;
MCP_IO.GLS3_Load.Power := 1000*Setpoints.GLSLoad.RequiredChargedV * Current;
*)
//find the longest charge time.  //need more work
longestChargeTime := MAX( MCP_IO.Charger[1].ChargeTime.timeToChargeLoad,
							MCP_IO.Charger[2].ChargeTime.timeToChargeLoad,
							MCP_IO.Charger[3].ChargeTime.timeToChargeLoad,
							MCP_IO.Charger[4].ChargeTime.timeToChargeLoad,
							MCP_IO.Charger[5].ChargeTime.timeToChargeLoad,
							MCP_IO.Charger[6].ChargeTime.timeToChargeLoad,
							MCP_IO.Charger[7].ChargeTime.timeToChargeLoad  //charger 7 for shaft ramp
							(*MCP_IO.Charger[8].ChargeTime.timeToChargeLoad, *)
							(*MCP_IO.GLS3_Load.timeToChargeLoad*));

ChargeTime_DB.LongestChargeTime_PT := REAL_TO_TIME (1000*longestChargeTime);

//FOR a := 1 TO 8 BY 1 DO
FOR a := 1 TO n BY 1 DO
	IF (longestChargeTime - MCP_IO.Charger[a].ChargeTime.timeToChargeLoad) >= 0 THEN
		ChargeTime_DB.ChargerDelay_PT[a] := REAL_TO_TIME (1000*(longestChargeTime - MCP_IO.Charger[a].ChargeTime.timeToChargeLoad));
		ELSE 
			ChargeTime_DB.ChargerDelay_PT[a] := REAL_TO_TIME (1000*(MCP_IO.Charger[a].ChargeTime.timeToChargeLoad - longestChargeTime));
	END_IF;		
		
	//IF (longestChargeTime - MCP_IO.Charger[a+3].ChargeTime.timeToChargeLoad) >= 0 THEN
	//	ChargeTime_DB.SustChargeTime_PT[a] := REAL_TO_TIME (1000*(longestChargeTime - MCP_IO.Charger[a+3].ChargeTime.timeToChargeLoad));	
	//END_IF;	
	
END_FOR;


(*IF (longestChargeTime - MCP_IO.Charger[7].ChargeTime.timeToChargeLoad) >= 0 THEN
	ChargeTime_DB.FormChargeTime_PT[1] := REAL_TO_TIME (1000*(longestChargeTime - MCP_IO.Charger[7].ChargeTime.timeToChargeLoad));	
END_IF;	
IF (longestChargeTime - MCP_IO.Charger[8].ChargeTime.timeToChargeLoad) >= 0 THEN
	ChargeTime_DB.FormChargeTime_PT[2] := REAL_TO_TIME (1000*(longestChargeTime - MCP_IO.Charger[8].ChargeTime.timeToChargeLoad));	
END_IF;	

IF (longestChargeTime - MCP_IO.GLS3_Load.timeToChargeLoad) >= 0 THEN
		ChargeTime_DB.PreFormChargeTime_PT := REAL_TO_TIME (1000*(longestChargeTime - MCP_IO.GLS3_Load.timeToChargeLoad));
		ELSE
			ChargeTime_DB.PreFormChargeTime_PT := REAL_TO_TIME (1000*(MCP_IO.GLS3_Load.timeToChargeLoad -longestChargeTime));
END_IF;
*)


//IF i > 8 THEN 
IF i > n THEN 
	i := 0;
END_IF

IF j > n THEN
	j := 0;
END_IF

IF m > n THEN
	m := 0;
END_IF

//IF a > 8 THEN
IF a > n THEN
	a := 1;
END_IF;]]></ST>
    </Implementation>
    <LineIds Name="ChargeTime">
      <LineId Id="868" Count="22" />
      <LineId Id="189" Count="0" />
      <LineId Id="744" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="441" Count="5" />
      <LineId Id="930" Count="0" />
      <LineId Id="1001" Count="19" />
      <LineId Id="1000" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="368" Count="14" />
      <LineId Id="791" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="383" Count="3" />
      <LineId Id="287" Count="0" />
      <LineId Id="390" Count="3" />
      <LineId Id="388" Count="0" />
      <LineId Id="395" Count="3" />
      <LineId Id="394" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="53" Count="7" />
      <LineId Id="51" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="961" Count="2" />
      <LineId Id="960" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="891" Count="5" />
      <LineId Id="558" Count="1" />
      <LineId Id="452" Count="0" />
      <LineId Id="470" Count="6" />
      <LineId Id="469" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="625" Count="1" />
      <LineId Id="795" Count="0" />
      <LineId Id="630" Count="1" />
      <LineId Id="699" Count="1" />
      <LineId Id="628" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="629" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="609" Count="2" />
      <LineId Id="642" Count="1" />
      <LineId Id="641" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="702" Count="1" />
      <LineId Id="454" Count="0" />
      <LineId Id="669" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="794" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="428" Count="0" />
      <LineId Id="426" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="796" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="522" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>