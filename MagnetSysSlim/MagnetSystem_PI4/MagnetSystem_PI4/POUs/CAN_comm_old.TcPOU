<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="CAN_comm_old" Id="{6159f28a-a40e-47e1-a643-148cedb01d11}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CAN_comm_old
VAR
	i : INT := 0; // data 0 - 7 
	j : INT := 1; // coil 1-10
	k : INT := 0; // message 0- 1 ( will be 1- 32 once we have all the UC)
	m : INT := 0; //msg 1,3,5...
	n : INT := 1;
	
	hmi_step1 : BOOL;
	hmi_step2 : BOOL;
	hmi_step3 : BOOL;
	hmi_step4 : BOOL;
	hmi_step5 : BOOL;
	hmi_CanTxB : ARRAY [0..7] OF BYTE;
	
	//Cap1_voltage_int : INT;
	//Cap1_voltage_hexstr : STRING;
	Vpbit			: REAL := 0.005; //voltage sum V/bit
	//Tpbit			: REAL := 1.0 // 1C / bit
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//0x0CF091 XX ELECTRICAL DATA
//0x0CF092 XX THERMAL DATA

//XX 
// ie 0x11[overvoltage][imbalance][blancing]
//data[0] = Electrical flag | data[1], data[2] = Voltage sum | data[3], data[4] = highest voltage | data[5], data[6] = average voltage | data[7] = life counter
//data[0].0
//data[0].1  Balancing
//data[0].2  
//data[0].3  Imbalance
//data[0].4
//data[0].5  Overvoltage
//data[0].6 = 1
//data[0].7 = 1

	//grabbing the device IDs and storing them
	// not needed since we can map all IDs from 01 - ef  will have to redo this part.
		IF heartbeat.pulse_1Hz = TRUE THEN
			Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].deviceID[n] := RIGHT (Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].cobID, 2);
			n := n+1;
			IF Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].deviceID[n-1] <> RIGHT (Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].cobID, 2) THEN 
				Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].deviceID[n] := RIGHT (Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].cobID, 2);
			END_IF
		END_IF	

FOR  j := 1 TO 10 BY 1 DO 
	//FOR k := 0 TO 1 BY 1 DO 
	//k = 2 for now, just need two msgs.
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].cobID :=  (DWORD_TO_HEXSTR (in := Devices.Coil[j]. , iPrecision := 2, bLoCase := FALSE));
	//Devices.Coil[1].UltraCap_CAN_ID := Replace (STR1 := Devices.Coil[1].UltraCap_CAN_ID, '',1,1);
	//Devices.Coil[j].UltraCap_CAN_RxMsgNum[k].cobID := LEFT (Devices.Coil[j].UltraCap_CAN_RxMsgNum[k].cobID, 5);

	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[0] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[0], iPrecision := 2, bLoCase := FALSE);
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[1] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[1], iPrecision := 2, bLoCase := FALSE);
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[2] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[2], iPrecision := 2, bLoCase := FALSE);
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[3] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[3], iPrecision := 2, bLoCase := FALSE);
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[4] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[4], iPrecision := 2, bLoCase := FALSE);
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[5] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[5], iPrecision := 2, bLoCase := FALSE);
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[6] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[6], iPrecision := 2, bLoCase := FALSE);
	Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData_hexstr[7] := BYTE_TO_HEXSTR (in := Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[7], iPrecision := 2, bLoCase := FALSE);

	//Cap1_voltage_hexstr := CONCAT (Devices.Coil[1].UltraCap_CAN_Rxdata_hexstr[5], Devices.Coil[1].UltraCap_CAN_Rxdata_hexstr[6]);
	//Cap1_voltage_int := DWORD_TO_INT (HEX_TO_DWORD( Cap1_voltage_hexstr);
	
	
	//Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].cobID := LEFT (Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].cobID, 5);
	//Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].deviceID := RIGHT (Devices.Coil[1].UltraCap_CAN_RxMsgNum[0].cobID, 4);
	
//cap voltage
	IF LEFT (Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].cobID, 6)= '8CF091' THEN
		//byte 1 and 2 comes in deci, so no need to convert, but watchout for bit shift on byte 1
		Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[1] := BYTE_TO_USINT (Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[1]);
		Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[2] := BYTE_TO_USINT (Devices.Coil[j].UltraCap_CAN_RxMsg[0].data[2]);

		Devices.Coil[j].CapVoltage := REAL_TO_INT (Vpbit * USINT_TO_REAL (Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[1] + Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[2])) ;
	END_IF;
	
//cap highest cell temperature
	
	IF LEFT (Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].cobID, 6) = '8CF092' THEN
	
		Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[1] := BYTE_TO_USINT (Devices.Coil[j].UltraCap_CAN_RxMsg[0].Data[1]);
		// offset is -45C.
		Devices.Coil[j].CapCellTemp := REAL_TO_INT (USINT_TO_REAL (Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[1])) - 45;
	END_IF;
		
	//END_FOR;
END_FOR;

// need to separate two messages.

//uc cell voltage 
FOR  j := 1 TO 10 BY 1 DO 
	//b7 ... b0 
	//01 - warning , 10 - alarm , 11 error
	IF LEFT (Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].cobID, 6)= '8CF091' THEN  //can be added for reduncancy
		IF Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].5 = 0 AND 
			Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].4 = 1
		THEN 
			Trips_DB.Coil[j].UC_Cell_OverV_warning := TRUE;  //warning 
		ELSIF 
			Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].5 = 1 AND 
			Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].4 = 0
		THEN 
			Trips_DB.Coil[j].UC_Cell_OverV_alarm := TRUE; // alarm
		ELSIF
			Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].5 = 1 AND 
			Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].4 = 1
		THEN 
			Trips_DB.Coil[j].UC_Cell_OverV_error := TRUE; // overvoltage error
		ELSE
			Trips_DB.Coil[j].UC_Cell_OverV_warning := FALSE;  
			Trips_DB.Coil[j].UC_Cell_OverV_alarm := FALSE; // error needs to be manually reset at the HMI clear all faults
		END_IF;	
END_IF;
	
	//cell temperature
	IF LEFT (Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].cobID, 6)= '8CF092' THEN
		IF Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].3 = 0 AND 
			Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].2 = 1 
			THEN 
				Trips_DB.Coil[j].UC_tempHigh_warning := TRUE;  //warning 
			ELSIF 
				Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].3 = 1 AND 
				Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].2 = 0 
				THEN 
					Trips_DB.Coil[j].UC_tempHigh_alarm := TRUE;  //alarm
			ELSIF
				Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].3 = 1 AND 
				Devices.Coil[j].UltraCap_CAN_RxMsgNum[0].byteData[0].2 = 1 
				THEN
					Trips_DB.Coil[j].UC_tempHigh := TRUE;  //alarm
			ELSE
				Trips_DB.Coil[j].UC_tempHigh_warning := FALSE;  //warning 
				Trips_DB.Coil[j].UC_tempHigh_alarm := FALSE;  //alarm	
		END_IF;
	END_IF;
END_FOR;

	
//output set address
IF hmi_step1 = TRUE THEN
	Devices.Coil[1].CanTx_config_ID := 16#0CDA7FCC;
	Devices.Coil[1].CanTx_config_length := 3;
	Devices.Coil[1].CanTx_config_request[0] := 16#02;
	Devices.Coil[1].CanTx_config_request[1] := 16#10;
	Devices.Coil[1].CanTx_config_request[2] := 16#03;
	
(*	Output.R2_06_CANrequest.cobId := 16#0CDA7FCC;
	Output.R2_06_CANrequest.length := 3;
	Output.R2_06_CANrequest.data[0] := 16#02;
	Output.R2_06_CANrequest.data[1] := 16#10;
	Output.R2_06_CANrequest.data[2] := 16#03;
	Output.R2_06_CANrequest.data[3] := 16#00;
	Output.R2_06_CANrequest.data[4] := 16#00;
	Output.R2_06_CANrequest.data[5] := 16#00;
	Output.R2_06_CANrequest.data[6] := 16#00;
	Output.R2_06_CANrequest.data[7] := 16#00;*)

ELSIF hmi_step2 = TRUE THEN
	Devices.Coil[1].CanTx_config_ID := 16#0CDA7FCC;
	Devices.Coil[1].CanTx_config_length := 3;
	Devices.Coil[1].CanTx_config_request[0] := 16#02;
	Devices.Coil[1].CanTx_config_request[1] := 16#27;
	Devices.Coil[1].CanTx_config_request[2] := 16#03;
	(*Output.R2_06_CANrequest.cobId := 16#0CDA7FCC;
	Output.R2_06_CANrequest.length := 3;
	Output.R2_06_CANrequest.data[0] := 16#02;
	Output.R2_06_CANrequest.data[1] := 16#27;
	Output.R2_06_CANrequest.data[2] := 16#01;
	Output.R2_06_CANrequest.data[3] := 16#00;
	Output.R2_06_CANrequest.data[4] := 16#00;
	Output.R2_06_CANrequest.data[5] := 16#00;
	Output.R2_06_CANrequest.data[6] := 16#00;
	Output.R2_06_CANrequest.data[7] := 16#00;
	*)
ELSIF hmi_step3 = TRUE THEN
	Devices.Coil[1].CanTx_config_ID := 16#0CDA7FCC;
	Devices.Coil[1].CanTx_config_length := 5;
	Devices.Coil[1].CanTx_config_request[0] := 16#04;
	Devices.Coil[1].CanTx_config_request[1] := 16#27;
	Devices.Coil[1].CanTx_config_request[2] := 16#02;
	Devices.Coil[1].CanTx_config_request[3] := 16#78;
	Devices.Coil[1].CanTx_config_request[4] := 16#9A;
	(*Output.R2_06_CANrequest.cobId := 16#0CDA7FCC;
	Output.R2_06_CANrequest.length := 5;
	Output.R2_06_CANrequest.data[0] := 16#04;
	Output.R2_06_CANrequest.data[1] := 16#27;
	Output.R2_06_CANrequest.data[2] := 16#02;
	Output.R2_06_CANrequest.data[3] := 16#78;
	Output.R2_06_CANrequest.data[4] := 16#9A;
	Output.R2_06_CANrequest.data[5] := 16#00;
	Output.R2_06_CANrequest.data[6] := 16#00;
	Output.R2_06_CANrequest.data[7] := 16#00;	
	*)
ELSIF hmi_step4 = TRUE THEN 
	Devices.Coil[1].CanTx_config_ID := 16#0CDA7FCC;
	Devices.Coil[1].CanTx_config_length := 5;
	Devices.Coil[1].CanTx_config_request[0] := 16#04;
	Devices.Coil[1].CanTx_config_request[1] := 16#2E;
	Devices.Coil[1].CanTx_config_request[2] := 16#FD;
	Devices.Coil[1].CanTx_config_request[3] := 16#08;
	Devices.Coil[1].CanTx_config_request[4] := hmi_CanTxB[4]; //desirable cobID / device ID
	(*Output.R2_06_CANrequest.cobId := 16#0CDA7FCC;
	Output.R2_06_CANrequest.length := 5;
	Output.R2_06_CANrequest.data[0] := 16#04;
	Output.R2_06_CANrequest.data[1] := 16#2E;
	Output.R2_06_CANrequest.data[2] := 16#FD;
	Output.R2_06_CANrequest.data[3] := 16#08;
	Output.R2_06_CANrequest.data[4] := 16#02; //desirable cobID / device ID
	Output.R2_06_CANrequest.data[5] := 16#00;
	Output.R2_06_CANrequest.data[6] := 16#00;
	Output.R2_06_CANrequest.data[7] := 16#00;
	*)
ELSIF hmi_step5 = TRUE THEN 
	Devices.Coil[1].CanTx_config_ID := 16#0CDA7FCC;
	Devices.Coil[1].CanTx_config_length := 4;
	Devices.Coil[1].CanTx_config_request[0] := 16#03; //restart software
	Devices.Coil[1].CanTx_config_request[1] := 16#11;
	Devices.Coil[1].CanTx_config_request[2] := 16#01;
	Devices.Coil[1].CanTx_config_request[3] := 16#08;
	(*Output.R2_06_CANrequest.cobId:= 16#0CDA7FCC;
	Output.R2_06_CANrequest.length := 4;
	Output.R2_06_CANrequest.data[0] := 16#03;
	Output.R2_06_CANrequest.data[1] := 16#11;
	Output.R2_06_CANrequest.data[2] := 16#01;
	Output.R2_06_CANrequest.data[3] := 16#00;
	Output.R2_06_CANrequest.data[4] := 16#00;
	Output.R2_06_CANrequest.data[5] := 16#00;
	Output.R2_06_CANrequest.data[6] := 16#00;
	Output.R2_06_CANrequest.data[7] := 16#00;
	*)
ELSE 
	Devices.Coil[1].CanTx_config_ID := 16#00000000;
	Devices.Coil[1].CanTx_config_request[0] := 16#00;
	Devices.Coil[1].CanTx_config_request[1] := 16#00;
	Devices.Coil[1].CanTx_config_request[2] := 16#00;
	Devices.Coil[1].CanTx_config_request[3] := 16#00;
	Devices.Coil[1].CanTx_config_request[4] := 16#00;
	Devices.Coil[1].CanTx_config_request[5] := 16#00;
	Devices.Coil[1].CanTx_config_request[6] := 16#00;
	Devices.Coil[1].CanTx_config_request[7] := 16#00;
END_IF;


IF i > 7 THEN
	i := 0;
END_IF;

IF j > 10 THEN
	j := 1;
END_IF;

IF k > 1 THEN
	k := 0;
END_IF;

IF m > 9 THEN
	m := 1;
END_IF;

IF n > 10 THEN // will be 10 later
	n := 1;
END_IF;


]]></ST>
    </Implementation>
    <LineIds Name="CAN_comm_old">
      <LineId Id="43" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="52" Count="1" />
      <LineId Id="55" Count="3" />
      <LineId Id="381" Count="0" />
      <LineId Id="590" Count="5" />
      <LineId Id="607" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="142" Count="14" />
      <LineId Id="279" Count="0" />
      <LineId Id="406" Count="2" />
      <LineId Id="280" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="269" Count="4" />
      <LineId Id="267" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="446" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="1" />
      <LineId Id="195" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="180" Count="2" />
      <LineId Id="186" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="188" Count="4" />
      <LineId Id="194" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="429" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="227" Count="2" />
      <LineId Id="234" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="235" Count="8" />
      <LineId Id="226" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="792" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="821" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="823" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="824" Count="4" />
      <LineId Id="330" Count="0" />
      <LineId Id="829" Count="0" />
      <LineId Id="635" Count="3" />
      <LineId Id="640" Count="0" />
      <LineId Id="693" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="831" Count="3" />
      <LineId Id="830" Count="0" />
      <LineId Id="705" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="648" Count="6" />
      <LineId Id="647" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="836" Count="3" />
      <LineId Id="835" Count="0" />
      <LineId Id="840" Count="1" />
      <LineId Id="706" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="657" Count="6" />
      <LineId Id="656" Count="0" />
      <LineId Id="695" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="843" Count="5" />
      <LineId Id="842" Count="0" />
      <LineId Id="707" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="666" Count="6" />
      <LineId Id="665" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="856" Count="4" />
      <LineId Id="855" Count="0" />
      <LineId Id="849" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="675" Count="6" />
      <LineId Id="674" Count="0" />
      <LineId Id="697" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="685" Count="6" />
      <LineId Id="683" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="767" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="168" Count="2" />
      <LineId Id="167" Count="0" />
      <LineId Id="172" Count="2" />
      <LineId Id="171" Count="0" />
      <LineId Id="245" Count="2" />
      <LineId Id="244" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="470" Count="1" />
      <LineId Id="737" Count="0" />
      <LineId Id="739" Count="0" />
      <LineId Id="796" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>